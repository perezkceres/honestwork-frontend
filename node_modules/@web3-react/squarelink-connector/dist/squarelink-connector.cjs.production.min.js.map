{"version":3,"file":"squarelink-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai'\n}\n\ntype Network = number | { chainId: number; [key: string]: any }\n\ninterface SquarelinkConnectorArguments {\n  clientId: string\n  networks: Network[]\n  options?: any\n}\n\nexport class SquarelinkConnector extends AbstractConnector {\n  private readonly clientId: string\n  private readonly networks: Network[]\n  private readonly options: any\n\n  public squarelink: any\n\n  constructor({ clientId, networks, options = {} }: SquarelinkConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : n.chainId))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.clientId = clientId\n    this.networks = networks\n    this.options = options\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.squarelink) {\n      const Squarelink = await import('squarelink').then(m => m?.default ?? m)\n      this.squarelink = new Squarelink(\n        this.clientId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : this.networks[0],\n        this.options\n      )\n    }\n\n    const provider = await this.squarelink.getProvider()\n\n    const account = await provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.squarelink.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.squarelink.getProvider().then((provider: any) => provider.send('eth_chainId'))\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.squarelink\n      .getProvider()\n      .then((provider: any) => provider.send('eth_accounts').then((accounts: string[]): string => accounts[0]))\n  }\n\n  public deactivate() {}\n}\n"],"names":["chainIdToNetwork","clientId","networks","options","chainIds","map","n","chainId","every","c","invariant","supportedChainIds","activate","_this3","squarelink","getProvider","provider","enable","then","accounts","account","this","m","Squarelink","getChainId","send","getAccount","deactivate","AbstractConnector"],"mappings":"8IAIMA,EAAkD,GACnD,YACA,YACA,YACA,YACC,YACC,4EAkBSC,IAAAA,SAAUC,IAAAA,aAAUC,QAAAA,aAAU,KACpCC,EAAWF,EAASG,KAAI,SAACC,SAA4B,iBAANA,EAAiBA,EAAIA,EAAEC,kBAE1EH,EAASI,OAAM,SAACC,WAAiBT,EAAiBS,OADpDC,qBAIM,CAAEC,kBAAmBP,WAEtBH,SAAWA,IACXC,SAAWA,IACXC,QAAUA,sHAGJS,gEAUYC,EAAKC,WAAWC,8BAAjCC,0BAEgBA,EAASC,SAASC,MAAK,SAACC,UAA+BA,EAAS,sBAAhFC,SAEC,CAAEJ,SAAAA,EAAUI,QAAAA,YAbdC,sBAAAR,EAAKC,kCACiB,8QAAO,mBAAcI,MAAK,SAAAI,+BAAKA,SAAAA,aAAcA,qBAAhEC,KACDT,WAAa,IAAIS,EACpBV,EAAKZ,SACuB,iBAArBY,EAAKX,SAAS,GAAkBF,EAAiBa,EAAKX,SAAS,IAAMW,EAAKX,SAAS,GAC1FW,EAAKV,qGAWEY,kDACJM,KAAKP,WAAWC,qDAGZS,iDACJH,KAAKP,WAAWC,cAAcG,MAAK,SAACF,UAAkBA,EAASS,KAAK,yDAGhEC,iDACJL,KAAKP,WACTC,cACAG,MAAK,SAACF,UAAkBA,EAASS,KAAK,gBAAgBP,MAAK,SAACC,UAA+BA,EAAS,gDAGlGQ,WAAA,gBAnDgCC"}
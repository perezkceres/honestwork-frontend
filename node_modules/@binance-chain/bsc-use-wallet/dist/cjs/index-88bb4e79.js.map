{"version":3,"file":"index-88bb4e79.js","sources":["../../node_modules/ethereumjs-tx/es5/index.js"],"sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ethUtil = require('ethereumjs-util');\nvar fees = require('ethereum-common/params.json');\nvar BN = ethUtil.BN;\n\n// secp256k1n/2\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n\n    data = data || {};\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n    ethUtil.defineProperties(this, fields, data);\n\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    // calculate chainId from signature\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0;\n\n    // set chainId\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true;\n\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n    return this._senderPubKey;\n  };\n\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n    return cost;\n  };\n\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n    return fee;\n  };\n\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;"],"names":["BN","ethUtil","N_DIV_2","Transaction","data","instance","Constructor","TypeError","_classCallCheck","this","fields","name","length","allowLess","default","Buffer","alias","allowZero","defineProperties","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","sigV","bufferToInt","v","chainId","Math","floor","_chainId","_homestead","prototype","toCreationAddress","to","toString","hash","includeSignature","undefined","items","raw","slice","r","s","rlphash","getChainId","_from","pubkey","getSenderPublicKey","publicToAddress","_senderPubKey","verifySignature","Error","msgHash","cmp","ecrecover","e","sign","privateKey","sig","ecsign","assign","getDataFee","cost","i","iaddn","fees","txDataZeroGas","txDataNonZeroGas","getBaseFee","fee","txGas","txCreation","getUpfrontCost","gasLimit","imul","gasPrice","iadd","value","validate","stringError","errors","push","join"],"mappings":"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"}
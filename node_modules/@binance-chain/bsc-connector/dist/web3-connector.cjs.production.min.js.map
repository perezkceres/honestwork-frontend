{"version":3,"file":"web3-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { AbstractConnectorArguments, ConnectorUpdate } from \"@web3-react/types\";\nimport { AbstractConnector } from \"@web3-react/abstract-connector\";\nimport warning from \"tiny-warning\";\n\nimport { SendReturnResult, SendReturn, Send, SendOld } from \"./types\";\n\nfunction parseSendReturn(sendReturn: SendReturnResult | SendReturn): any {\n  return sendReturn.hasOwnProperty(\"result\") ? sendReturn.result : sendReturn;\n}\n\nexport class NoBscProviderError extends Error {\n  public constructor() {\n    super();\n    this.name = this.constructor.name;\n    this.message = \"No BSC provider was found on window.BinanceChain.\";\n  }\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super();\n    this.name = this.constructor.name;\n    this.message = \"The user rejected the request.\";\n  }\n}\n\nexport class BscConnector extends AbstractConnector {\n  constructor(kwargs: AbstractConnectorArguments) {\n    super(kwargs);\n\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this);\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  private handleChainChanged(chainId: string | number): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n    this.emitUpdate({ chainId, provider: window.BinanceChain });\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n    if (accounts.length === 0) {\n      this.emitDeactivate();\n    } else {\n      this.emitUpdate({ account: accounts[0] });\n    }\n  }\n\n  private handleClose(code: number, reason: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'close' event with payload\", code, reason);\n    }\n    this.emitDeactivate();\n  }\n\n  private handleNetworkChanged(networkId: string | number): void {\n    if (__DEV__) {\n      console.log(\"Handling 'networkChanged' event with payload\", networkId);\n    }\n    this.emitUpdate({ chainId: networkId, provider: window.BinanceChain });\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!window.BinanceChain) {\n      throw new NoBscProviderError();\n    }\n\n    if (window.BinanceChain.on) {\n      window.BinanceChain.on(\"chainChanged\", this.handleChainChanged);\n      window.BinanceChain.on(\"accountsChanged\", this.handleAccountsChanged);\n      window.BinanceChain.on(\"close\", this.handleClose);\n      window.BinanceChain.on(\"networkChanged\", this.handleNetworkChanged);\n    }\n\n    if ((window.BinanceChain as any).isMetaMask) {\n      (window.BinanceChain as any).autoRefreshOnNetworkChange = false;\n    }\n\n    // try to activate + get account via eth_requestAccounts\n    let account;\n    try {\n      account = await (window.BinanceChain.send as Send)(\n        \"eth_requestAccounts\"\n      ).then((sendReturn) => parseSendReturn(sendReturn)[0]);\n    } catch (error) {\n      if ((error as any).code === 4001) {\n        throw new UserRejectedRequestError();\n      }\n      warning(\n        false,\n        \"eth_requestAccounts was unsuccessful, falling back to enable\"\n      );\n    }\n\n    // if unsuccessful, try enable\n    if (!account) {\n      // if enable is successful but doesn't return accounts, fall back to getAccount (not happy i have to do this...)\n      account = await window.BinanceChain.enable().then(\n        (sendReturn) => sendReturn && parseSendReturn(sendReturn)[0]\n      );\n    }\n\n    return { provider: window.BinanceChain, ...(account ? { account } : {}) };\n  }\n\n  public async getProvider(): Promise<any> {\n    return window.BinanceChain;\n  }\n\n  public async getChainId(): Promise<number | string> {\n    if (!window.BinanceChain) {\n      throw new NoBscProviderError();\n    }\n\n    let chainId;\n    try {\n      chainId = await (window.BinanceChain.send as Send)(\"eth_chainId\").then(\n        parseSendReturn\n      );\n    } catch {\n      warning(\n        false,\n        \"eth_chainId was unsuccessful, falling back to net_version\"\n      );\n    }\n\n    if (!chainId) {\n      try {\n        chainId = await (window.BinanceChain.send as Send)(\"net_version\").then(\n          parseSendReturn\n        );\n      } catch {\n        warning(\n          false,\n          \"net_version was unsuccessful, falling back to net version v2\"\n        );\n      }\n    }\n\n    if (!chainId) {\n      try {\n        chainId = parseSendReturn(\n          (window.BinanceChain.send as SendOld)({ method: \"net_version\" })\n        );\n      } catch {\n        warning(\n          false,\n          \"net_version v2 was unsuccessful, falling back to manual matches and static properties\"\n        );\n      }\n    }\n\n    if (!chainId) {\n      if ((window.BinanceChain as any).isDapper) {\n        chainId = parseSendReturn(\n          (window.BinanceChain as any).cachedResults.net_version\n        );\n      } else {\n        chainId =\n          (window.BinanceChain as any).chainId ||\n          (window.BinanceChain as any).netVersion ||\n          (window.BinanceChain as any).networkVersion ||\n          (window.BinanceChain as any)._chainId;\n      }\n    }\n\n    return chainId;\n  }\n\n  public async getAccount(): Promise<null | string> {\n    if (!window.BinanceChain) {\n      throw new NoBscProviderError();\n    }\n\n    let account;\n    try {\n      account = await (window.BinanceChain.send as Send)(\"eth_accounts\").then(\n        (sendReturn) => parseSendReturn(sendReturn)[0]\n      );\n    } catch {\n      warning(false, \"eth_accounts was unsuccessful, falling back to enable\");\n    }\n\n    if (!account) {\n      try {\n        account = await window.BinanceChain.enable().then(\n          (sendReturn) => parseSendReturn(sendReturn)[0]\n        );\n      } catch {\n        warning(\n          false,\n          \"enable was unsuccessful, falling back to eth_accounts v2\"\n        );\n      }\n    }\n\n    if (!account) {\n      account = parseSendReturn(\n        (window.BinanceChain.send as SendOld)({ method: \"eth_accounts\" })\n      )[0];\n    }\n\n    return account;\n  }\n\n  public deactivate() {\n    if (window.BinanceChain && window.BinanceChain.removeListener) {\n      window.BinanceChain.removeListener(\n        \"chainChanged\",\n        this.handleChainChanged\n      );\n      window.BinanceChain.removeListener(\n        \"accountsChanged\",\n        this.handleAccountsChanged\n      );\n      window.BinanceChain.removeListener(\"close\", this.handleClose);\n      window.BinanceChain.removeListener(\n        \"networkChanged\",\n        this.handleNetworkChanged\n      );\n    }\n  }\n\n  public async isAuthorized(): Promise<boolean> {\n    if (!window.BinanceChain) {\n      return false;\n    }\n\n    try {\n      return await (window.BinanceChain.send as Send)(\"eth_accounts\").then(\n        (sendReturn) => {\n          if (parseSendReturn(sendReturn).length > 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      );\n    } catch {\n      return false;\n    }\n  }\n}\n"],"names":["parseSendReturn","sendReturn","hasOwnProperty","result","_super","_this","name","constructor","message","__extends","Error","kwargs","handleNetworkChanged","bind","handleChainChanged","handleAccountsChanged","handleClose","BscConnector","chainId","emitUpdate","provider","window","BinanceChain","accounts","length","emitDeactivate","account","code","reason","networkId","NoBscProviderError","on","this","isMetaMask","autoRefreshOnNetworkChange","send","then","_a","UserRejectedRequestError","enable","_c","method","isDapper","cachedResults","net_version","netVersion","networkVersion","_chainId","removeListener","_b","AbstractConnector"],"mappings":"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"}
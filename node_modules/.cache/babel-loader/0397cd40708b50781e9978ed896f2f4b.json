{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers';\nimport { useMasterchef, useSmartChef } from './useContract';\n\nconst useStake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useSmartStake = (sousId, isUsingBnb = false) => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const smartChefContract = useSmartChef(sousId);\n  const handleStake = useCallback(async amount => {\n    const stakeFn = isUsingBnb ? smartStakeBnb : smartStake;\n    await stakeFn(smartChefContract, amount, account);\n    dispatch(updateUserStakedBalance(String(sousId), account));\n    dispatch(updateUserBalance(String(sousId), account));\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useSmartStake, \"xw8w27H2cQx5H9wumOYwv2Cz6Gc=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","stake","smartStakeBnb","smartStake","useMasterchef","useSmartChef","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSmartStake","sousId","isUsingBnb","smartChefContract","stakeFn","String"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,EAA0DC,iBAA1D,QAAmF,eAAnF;AACA,SAASC,KAAT,EAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,mBAAjD;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;AAAA;;AAChC,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMc,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,QAAMO,WAAW,GAAGhB,WAAW,CAC7B,MAAOiB,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACS,kBAAD,EAAqBH,GAArB,EAA0BK,MAA1B,EAAkCH,OAAlC,CAA1B;AACAD,IAAAA,QAAQ,CAACV,sBAAsB,CAACW,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL4B,EAM7B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCH,GAAxC,CAN6B,CAA/B;AASA,SAAO;AAAES,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAfD;;GAAML,Q;UACaT,W,EACGD,S,EACOQ,a;;;AAe7B,OAAO,MAAMa,aAAa,GAAG,CAACC,MAAD,EAAiBC,UAAU,GAAG,KAA9B,KAAwC;AAAA;;AACnE,QAAMX,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMwB,iBAAiB,GAAGf,YAAY,CAACa,MAAD,CAAtC;AAEA,QAAMP,WAAW,GAAGhB,WAAW,CAC7B,MAAOiB,MAAP,IAA0B;AACxB,UAAMS,OAAO,GAAGF,UAAU,GAAGjB,aAAH,GAAmBC,UAA7C;AACA,UAAMkB,OAAO,CAACD,iBAAD,EAAoBR,MAApB,EAA4BH,OAA5B,CAAb;AACAD,IAAAA,QAAQ,CAACT,uBAAuB,CAACuB,MAAM,CAACJ,MAAD,CAAP,EAAiBT,OAAjB,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACR,iBAAiB,CAACsB,MAAM,CAACJ,MAAD,CAAP,EAAiBT,OAAjB,CAAlB,CAAR;AACD,GAN4B,EAO7B,CAACA,OAAD,EAAUD,QAAV,EAAoBW,UAApB,EAAgCC,iBAAhC,EAAmDF,MAAnD,CAP6B,CAA/B;AAUA,SAAO;AAAEF,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAhBM;;IAAMM,a;UACMpB,W,EACGD,S,EACMS,Y;;;AAe5B,eAAeC,QAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\n\r\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\r\n      await stakeFn(smartChefContract, amount, account)\r\n      dispatch(updateUserStakedBalance(String(sousId), account))\r\n      dispatch(updateUserBalance(String(sousId), account))\r\n    },\r\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n"]},"metadata":{},"sourceType":"module"}
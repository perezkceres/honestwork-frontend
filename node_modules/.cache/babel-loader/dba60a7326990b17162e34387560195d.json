{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useCake, useLottery, useForest } from './useContract';\nimport { getAllowance } from '../utils/erc20'; // Retrieve lottery allowance\n\nexport const useLotteryAllowance = () => {\n  _s();\n\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  const {\n    account\n  } = useWallet();\n  const lotteryContract = useLottery();\n  const cakeContract = useCake();\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account);\n      setAllowance(new BigNumber(res));\n    };\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance();\n    }\n\n    const refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, cakeContract, lotteryContract]);\n  return allowance;\n}; // Retrieve IFO allowance\n\n_s(useLotteryAllowance, \"wGosQaA5RlTVrQ/mf1uyoFeAK00=\", false, function () {\n  return [useWallet, useLottery, useCake];\n});\n\nexport const useIfoAllowance = (tokenContract, spenderAddress, dependency) => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const [allowance, setAllowance] = useState(null);\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call();\n        setAllowance(new BigNumber(res));\n      } catch (e) {\n        setAllowance(null);\n      }\n    };\n\n    fetch();\n  }, [account, spenderAddress, tokenContract, dependency]);\n  return allowance;\n};\n\n_s2(useIfoAllowance, \"q9ROkN0QXR56czc3npru2vScrDg=\", false, function () {\n  return [useWallet];\n});\n\nexport const useForestAllowance = () => {\n  _s3();\n\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  const {\n    account\n  } = useWallet();\n  const forestContract = useForest();\n  const cakeContract = useCake();\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, forestContract, account);\n      setAllowance(new BigNumber(res));\n    };\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance();\n    }\n\n    const refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, cakeContract, forestContract]);\n  return allowance;\n};\n\n_s3(useForestAllowance, \"TZDfZEd9B1DzMRIDCKVqNTMpGYQ=\", false, function () {\n  return [useWallet, useForest, useCake];\n});","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useAllowance.ts"],"names":["useEffect","useState","BigNumber","useWallet","useCake","useLottery","useForest","getAllowance","useLotteryAllowance","allowance","setAllowance","account","lotteryContract","cakeContract","fetchAllowance","res","refreshInterval","setInterval","clearInterval","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","methods","call","e","useForestAllowance","forestContract"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useCake, useLottery, useForest } from './useContract'\r\nimport { getAllowance } from '../utils/erc20'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account }: { account: string } = useWallet()\r\n  const lotteryContract = useLottery()\r\n  const cakeContract = useCake()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await getAllowance(cakeContract, lotteryContract, account)\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && cakeContract && cakeContract) {\r\n      fetchAllowance()\r\n    }\r\n    const refreshInterval = setInterval(fetchAllowance, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const [allowance, setAllowance] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        setAllowance(null)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\nexport const useForestAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account }: { account: string } = useWallet()\r\n  const forestContract = useForest()\r\n  const cakeContract = useCake()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await getAllowance(cakeContract, forestContract, account)\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && cakeContract && cakeContract) {\r\n      fetchAllowance()\r\n    }\r\n    const refreshInterval = setInterval(fetchAllowance, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [account, cakeContract, forestContract])\r\n\r\n  return allowance\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
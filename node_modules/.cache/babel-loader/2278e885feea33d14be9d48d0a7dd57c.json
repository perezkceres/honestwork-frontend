{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport cakeABI from 'config/abi/cake.json';\nimport { getContract } from 'utils/web3';\nimport { getTokenBalance } from 'utils/erc20';\nimport { getLotteryAddress, getCakeAddress } from 'utils/addressHelpers';\nimport multicall from 'utils/multicall';\nimport erc20 from 'config/abi/erc20.json';\nimport useRefresh from './useRefresh'; // const useTokenBalance = (tokenAddress: string) => {\n//   const [balance, setBalance] = useState(new BigNumber(0))\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n//   const { fastRefresh } = useRefresh()\n//\n//   useEffect(() => {\n//     const fetchBalance = async () => {\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\n//       setBalance(new BigNumber(res))\n//     }\n//\n//     if (account && ethereum) {\n//       fetchBalance()\n//     }\n//   }, [account, ethereum, tokenAddress, fastRefresh])\n//\n//   return balance\n// }\n\nconst useTokenBalance = (tokenAddress, _account, _provider) => {\n  _s();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    account: useAccount,\n    ethereum\n  } = useWallet();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const account = _account || useAccount;\n  const currentProvider = _provider || ethereum;\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(currentProvider, tokenAddress, account);\n      setBalance(new BigNumber(res));\n    };\n\n    if (account && currentProvider) {\n      fetchBalance();\n    }\n  }, [account, currentProvider, tokenAddress, fastRefresh]);\n  return balance;\n};\n\n_s(useTokenBalance, \"32EXgooNTfal9DegVncjTHS6Y0w=\", false, function () {\n  return [useWallet, useRefresh];\n});\n\nexport const useTotalSupply = () => {\n  _s2();\n\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress());\n      const supply = await cakeContract.methods.totalSupply().call();\n      setTotalSupply(new BigNumber(supply));\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useBurnedBalance = tokenAddress => {\n  _s3();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress());\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();\n      setBalance(new BigNumber(bal));\n    };\n\n    fetchBalance();\n  }, [tokenAddress, slowRefresh]);\n  return balance;\n};\n\n_s3(useBurnedBalance, \"qyENdKcKAtFXxHK1y11FyHVhXpA=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useLotteryLockedBalance = tokenAddress => {\n  _s4();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const burnAddress = getLotteryAddress();\n      const [burnedCakeBalance] = await multicall(erc20, [{\n        address: tokenAddress,\n        name: 'balanceOf',\n        params: [burnAddress]\n      }]);\n      if (!burnedCakeBalance) return;\n      setBalance(new BigNumber(burnedCakeBalance));\n    };\n\n    fetchBalance();\n  }, [slowRefresh, tokenAddress]);\n\n  if (!balance) {\n    return new BigNumber(0);\n  }\n\n  return balance;\n};\n\n_s4(useLotteryLockedBalance, \"qyENdKcKAtFXxHK1y11FyHVhXpA=\", false, function () {\n  return [useRefresh];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","cakeABI","getContract","getTokenBalance","getLotteryAddress","getCakeAddress","multicall","erc20","useRefresh","useTokenBalance","tokenAddress","_account","_provider","balance","setBalance","account","useAccount","ethereum","fastRefresh","currentProvider","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","methods","call","useBurnedBalance","bal","balanceOf","useLotteryLockedBalance","burnAddress","burnedCakeBalance","address","name","params"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport {getLotteryAddress, getCakeAddress} from 'utils/addressHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport useRefresh from './useRefresh'\r\n\r\n// const useTokenBalance = (tokenAddress: string) => {\r\n//   const [balance, setBalance] = useState(new BigNumber(0))\r\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n//   const { fastRefresh } = useRefresh()\r\n//\r\n//   useEffect(() => {\r\n//     const fetchBalance = async () => {\r\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n//       setBalance(new BigNumber(res))\r\n//     }\r\n//\r\n//     if (account && ethereum) {\r\n//       fetchBalance()\r\n//     }\r\n//   }, [account, ethereum, tokenAddress, fastRefresh])\r\n//\r\n//   return balance\r\n// }\r\n\r\nconst useTokenBalance = (tokenAddress: string, _account?: string, _provider?: any) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account: useAccount, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const account = _account || useAccount;\r\n  const currentProvider = _provider || ethereum;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(currentProvider, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && currentProvider) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, currentProvider, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useLotteryLockedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const burnAddress = getLotteryAddress()\r\n      const [burnedCakeBalance] = await multicall(erc20, [\r\n        {\r\n          address: tokenAddress,\r\n          name: 'balanceOf',\r\n          params: [burnAddress],\r\n        },\r\n      ])\r\n\r\n      if (!burnedCakeBalance) return\r\n\r\n      setBalance(new BigNumber(burnedCakeBalance))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [slowRefresh, tokenAddress])\r\n\r\n  if (!balance) {\r\n    return new BigNumber(0)\r\n  }\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-param-reassign */import{createSlice}from'@reduxjs/toolkit';import farmsConfig from'config/constants/farms';import fetchFarms from'./fetchFarms';import{fetchFarmUserEarnings,fetchFarmUserAllowances,fetchFarmUserTokenBalances,fetchFarmUserStakedBalances}from'./fetchFarmUser';var initialState={data:_toConsumableArray(farmsConfig)};export var farmsSlice=createSlice({name:'Farms',initialState:initialState,reducers:{setFarmsPublicData:function setFarmsPublicData(state,action){var liveFarmsData=action.payload;state.data=state.data.map(function(farm){var liveFarmData=liveFarmsData.find(function(f){return f.pid===farm.pid;});return _objectSpread(_objectSpread({},farm),liveFarmData);});},setFarmUserData:function setFarmUserData(state,action){var arrayOfUserDataObjects=action.payload.arrayOfUserDataObjects;arrayOfUserDataObjects.forEach(function(userDataEl){var index=userDataEl.index;state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:userDataEl});});}}});// Actions\nvar _farmsSlice$actions=farmsSlice.actions,setFarmsPublicData=_farmsSlice$actions.setFarmsPublicData,setFarmUserData=_farmsSlice$actions.setFarmUserData;// Thunks\nexport{setFarmsPublicData,setFarmUserData};export var fetchFarmsPublicDataAsync=function fetchFarmsPublicDataAsync(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var farms;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchFarms();case 2:farms=_context.sent;dispatch(setFarmsPublicData(farms));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchFarmUserDataAsync=function fetchFarmUserDataAsync(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var userFarmAllowances,userFarmTokenBalances,userStakedBalances,userFarmEarnings,arrayOfUserDataObjects;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchFarmUserAllowances(account);case 2:userFarmAllowances=_context2.sent;_context2.next=5;return fetchFarmUserTokenBalances(account);case 5:userFarmTokenBalances=_context2.sent;_context2.next=8;return fetchFarmUserStakedBalances(account);case 8:userStakedBalances=_context2.sent;_context2.next=11;return fetchFarmUserEarnings(account);case 11:userFarmEarnings=_context2.sent;arrayOfUserDataObjects=userFarmAllowances.map(function(farmAllowance,index){return{index:index,allowance:userFarmAllowances[index],tokenBalance:userFarmTokenBalances[index],stakedBalance:userStakedBalances[index],earnings:userFarmEarnings[index]};});dispatch(setFarmUserData({arrayOfUserDataObjects:arrayOfUserDataObjects}));case 14:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export default farmsSlice.reducer;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/state/farms/index.ts"],"names":["createSlice","farmsConfig","fetchFarms","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","initialState","data","farmsSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","pid","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","tokenBalance","stakedBalance","earnings","reducer"],"mappings":"wpBAAA,sCACA,OAASA,WAAT,KAA4B,kBAA5B,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OACEC,qBADF,CAEEC,uBAFF,CAGEC,0BAHF,CAIEC,2BAJF,KAKO,iBALP,CAQA,GAAMC,CAAAA,YAAwB,CAAG,CAAEC,IAAI,oBAAMP,WAAN,CAAN,CAAjC,CAEA,MAAO,IAAMQ,CAAAA,UAAU,CAAGT,WAAW,CAAC,CACpCU,IAAI,CAAE,OAD8B,CAEpCH,YAAY,CAAZA,YAFoC,CAGpCI,QAAQ,CAAE,CACRC,kBAAkB,CAAE,4BAACC,KAAD,CAAQC,MAAR,CAAmB,CACrC,GAAMC,CAAAA,aAAqB,CAAGD,MAAM,CAACE,OAArC,CACAH,KAAK,CAACL,IAAN,CAAaK,KAAK,CAACL,IAAN,CAAWS,GAAX,CAAe,SAACC,IAAD,CAAU,CACpC,GAAMC,CAAAA,YAAY,CAAGJ,aAAa,CAACK,IAAd,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,GAAF,GAAUJ,IAAI,CAACI,GAAtB,EAAnB,CAArB,CACA,sCAAYJ,IAAZ,EAAqBC,YAArB,EACD,CAHY,CAAb,CAID,CAPO,CAQRI,eAAe,CAAE,yBAACV,KAAD,CAAQC,MAAR,CAAmB,IAC1BU,CAAAA,sBAD0B,CACCV,MAAM,CAACE,OADR,CAC1BQ,sBAD0B,CAElCA,sBAAsB,CAACC,OAAvB,CAA+B,SAACC,UAAD,CAAgB,IACrCC,CAAAA,KADqC,CAC3BD,UAD2B,CACrCC,KADqC,CAE7Cd,KAAK,CAACL,IAAN,CAAWmB,KAAX,iCAAyBd,KAAK,CAACL,IAAN,CAAWmB,KAAX,CAAzB,MAA4CC,QAAQ,CAAEF,UAAtD,GACD,CAHD,EAID,CAdO,CAH0B,CAAD,CAA9B,CAqBP;wBACuDjB,UAAU,CAACoB,O,CAAnDjB,kB,qBAAAA,kB,CAAoBW,e,qBAAAA,e,CAEnC;2CACA,MAAO,IAAMO,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,kGAAM,iBAAOC,QAAP,kJACzB7B,CAAAA,UAAU,EADe,QACvC8B,KADuC,eAE7CD,QAAQ,CAACnB,kBAAkB,CAACoB,KAAD,CAAnB,CAAR,CAF6C,sDAAN,gEAAlC,CAIP,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,OAAD,kGAAa,kBAAOH,QAAP,qPAChB3B,CAAAA,uBAAuB,CAAC8B,OAAD,CADP,QAC3CC,kBAD2C,uCAEb9B,CAAAA,0BAA0B,CAAC6B,OAAD,CAFb,QAE3CE,qBAF2C,uCAGhB9B,CAAAA,2BAA2B,CAAC4B,OAAD,CAHX,QAG3CG,kBAH2C,wCAIlBlC,CAAAA,qBAAqB,CAAC+B,OAAD,CAJH,SAI3CI,gBAJ2C,gBAM3Cd,sBAN2C,CAMlBW,kBAAkB,CAAClB,GAAnB,CAAuB,SAACsB,aAAD,CAAgBZ,KAAhB,CAA0B,CAC9E,MAAO,CACLA,KAAK,CAALA,KADK,CAELa,SAAS,CAAEL,kBAAkB,CAACR,KAAD,CAFxB,CAGLc,YAAY,CAAEL,qBAAqB,CAACT,KAAD,CAH9B,CAILe,aAAa,CAAEL,kBAAkB,CAACV,KAAD,CAJ5B,CAKLgB,QAAQ,CAAEL,gBAAgB,CAACX,KAAD,CALrB,CAAP,CAOD,CAR8B,CANkB,CAgBjDI,QAAQ,CAACR,eAAe,CAAC,CAAEC,sBAAsB,CAAtBA,sBAAF,CAAD,CAAhB,CAAR,CAhBiD,yDAAb,kEAA/B,CAmBP,cAAef,CAAAA,UAAU,CAACmC,OAA1B","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Web3 from 'web3';\nimport getRpcUrl from 'utils/getRpcUrl';\nconst RPC_URL = getRpcUrl();\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, {\n  timeout: 10000\n});\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\n\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider);\n  return web3;\n};\n\nconst getContract = (abi, address, contractOptions) => {\n  const web3 = getWeb3();\n  return new web3.eth.Contract(abi, address, contractOptions);\n};\n\nconst isAddress = address => {\n  return Web3.utils.isAddress(address);\n};\n\nexport { getWeb3, getContract, httpProvider, isAddress };","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/utils/web3.ts"],"names":["Web3","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","getWeb3","web3","getContract","abi","address","contractOptions","eth","Contract","isAddress","utils"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAIA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,MAAMC,OAAO,GAAGD,SAAS,EAAzB;AACA,MAAME,YAAY,GAAG,IAAIH,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,EAAyC;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAzC,CAArB;AAEA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASG,YAAT,CAAb;AACA,SAAOK,IAAP;AACD,CAHD;;AAIA,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAWC,OAAX,EAA4BC,eAA5B,KAAkE;AACpF,QAAMJ,IAAI,GAAGD,OAAO,EAApB;AACA,SAAO,IAAIC,IAAI,CAACK,GAAL,CAASC,QAAb,CAAuBJ,GAAvB,EAAmDC,OAAnD,EAA4DC,eAA5D,CAAP;AACD,CAHD;;AAKA,MAAMG,SAAS,GAAIJ,OAAD,IAAqB;AACrC,SAAOX,IAAI,CAACgB,KAAL,CAAWD,SAAX,CAAqBJ,OAArB,CAAP;AACD,CAFD;;AAIA,SAASJ,OAAT,EAAkBE,WAAlB,EAA+BN,YAA/B,EAA6CY,SAA7C","sourcesContent":["import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nconst isAddress = (address: string) => {\r\n  return Web3.utils.isAddress(address)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider, isAddress }\r\n"]},"metadata":{},"sourceType":"module"}
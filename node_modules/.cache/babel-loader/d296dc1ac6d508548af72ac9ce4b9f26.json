{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport Divider from './components/Divider';\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    tokenMode\n  } = farmsProps;\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8);\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8);\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)); // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    // let userTotalTVL = new BigNumber(0);\n    // let userAllowance = 0;\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n      //   return farm\n      // }\n      const cakeRewardPerBlock = new BigNumber(farm.gajPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR); // if (farm.userData) {\n      //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\n      //   userTotalTVL = userTotalTVL.plus(userShare)\n      //   const userWL = Whitelist.find(add => add.wallet === account);\n      //   userAllowance = userWL.allowance\n      // }\n\n      let apy = cakePrice.times(cakeRewardPerYear);\n      let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        totalValue = totalValue.times(bnbPrice);\n      }\n\n      if (totalValue.comparedTo(0) > 0) {\n        apy = apy.div(totalValue);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this));\n  }, [bnbPrice, account, cakePrice, ethereum]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"lg\",\n      color: \"primary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: tokenMode ? 'Stake tokens to earn SALSA' : 'Stake LP tokens to earn SALSA'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"50% of the Deposit Fee will be used to buyback SALSA and Burn the Tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Burn Time: Everyday 18:33 UTC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"50% of the Deposit Fee will be sent to treasury wallet for Future Development\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Farms and Pools are live\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n      stakedOnly: stakedOnly,\n      setStakedOnly: setStakedOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/history`,\n          children: farmsList(inactiveFarms, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"U7j0Q/3y0k3JMsUX/Kmgi5RmzpA=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePriceBnbBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Heading","BLOCKS_PER_YEAR","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","FarmTabButtons","Divider","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","pid","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","gajPerBlock","times","poolWeight","div","pow","cakeRewardPerYear","apy","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","BNB","comparedTo","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => { \r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8)\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8)\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      // let userTotalTVL = new BigNumber(0);\r\n      // let userAllowance = 0;\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.gajPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        // if (farm.userData) {\r\n        //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\r\n        //   userTotalTVL = userTotalTVL.plus(userShare)\r\n        //   const userWL = Whitelist.find(add => add.wallet === account);\r\n        //   userAllowance = userWL.allowance\r\n        // }\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            'Stake tokens to earn SALSA'\r\n            :\r\n          'Stake LP tokens to earn SALSA'\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        50% of the Deposit Fee will be used to buyback SALSA and Burn the Tokens\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        Burn Time: Everyday 18:33 UTC\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        50% of the Deposit Fee will be sent to treasury wallet for Future Development \r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        Farms and Pools are live\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n         \r\n            {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n              COMING SOON...\r\n            </Heading> */}\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n              COMING SOON...\r\n            </Heading> */}\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"]},"metadata":{},"sourceType":"module"}
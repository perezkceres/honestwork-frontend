{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/contexts/Localisation/languageContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { StringTranslations } from '@crowdin/crowdin-api-client';\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext';\nimport { allLanguages, EN } from 'config/localisation/languageCodes';\nconst CACHE_KEY = 'pancakeSwapLanguage';\nconst LanguageContext = /*#__PURE__*/React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined\n});\nconst fileId = 8;\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID);\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY\n});\n\nconst fetchTranslationsForSelectedLanguage = selectedLanguage => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200);\n};\n\nconst LanguageContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [selectedLanguage, setSelectedLanguage] = useState(EN);\n  const [translatedLanguage, setTranslatedLanguage] = useState(EN);\n  const [translations, setTranslations] = useState([]);\n\n  const getStoredLang = storedLangCode => {\n    return allLanguages.filter(language => {\n      return language.code === storedLangCode;\n    })[0];\n  };\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY);\n\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode);\n      setSelectedLanguage(storedLang);\n    } else {\n      setSelectedLanguage(EN);\n    }\n  }, []);\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`).then(r => r.json()) // fetchTranslationsForSelectedLanguage(selectedLanguage)\n      .then(translationApiResponse => {\n        if (translationApiResponse.data.length < 1) {\n          setTranslations(['error']);\n        } else {\n          setTranslations(translationApiResponse.data);\n        }\n      }).then(() => setTranslatedLanguage(selectedLanguage)).catch(e => {\n        console.error(\"ERROR\");\n        console.error(e);\n        setTranslations(['error']);\n      });\n    }\n  }, [selectedLanguage, setTranslations]);\n\n  const handleLanguageSelect = langObject => {\n    setSelectedLanguage(langObject);\n    localStorage.setItem(CACHE_KEY, langObject.code);\n  };\n\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      selectedLanguage,\n      setSelectedLanguage: handleLanguageSelect,\n      translatedLanguage,\n      setTranslatedLanguage\n    },\n    children: /*#__PURE__*/_jsxDEV(TranslationsContext.Provider, {\n      value: {\n        translations,\n        setTranslations\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LanguageContextProvider, \"xBwFn6rM05cDs06lVQZtx43Z7xc=\");\n\n_c = LanguageContextProvider;\nexport { LanguageContext, LanguageContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageContextProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/contexts/Localisation/languageContext.tsx"],"names":["React","useState","useEffect","StringTranslations","TranslationsContext","allLanguages","EN","CACHE_KEY","LanguageContext","createContext","selectedLanguage","setSelectedLanguage","undefined","translatedLanguage","setTranslatedLanguage","fileId","projectId","parseInt","process","env","REACT_APP_CROWDIN_PROJECTID","stringTranslationsApi","token","REACT_APP_CROWDIN_APIKEY","fetchTranslationsForSelectedLanguage","listLanguageTranslations","code","LanguageContextProvider","children","translations","setTranslations","getStoredLang","storedLangCode","filter","language","localStorage","getItem","storedLang","console","log","fetch","then","r","json","translationApiResponse","data","length","catch","e","error","handleLanguageSelect","langObject","setItem"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-param-reassign */import{createSlice}from'@reduxjs/toolkit';import poolsConfig from'config/constants/pools';import{fetchPoolsBlockLimits,fetchPoolsTotalStaking}from'./fetchPools';import{fetchPoolsAllowance,fetchUserBalances,fetchUserStakeBalances,fetchUserPendingRewards}from'./fetchPoolsUser';var initialState={data:_toConsumableArray(poolsConfig)};export var PoolsSlice=createSlice({name:'Pools',initialState:initialState,reducers:{setPoolsPublicData:function setPoolsPublicData(state,action){var livePoolsData=action.payload;state.data=state.data.map(function(pool){var livePoolData=livePoolsData.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},pool),livePoolData);});},setPoolsUserData:function setPoolsUserData(state,action){var userData=action.payload;state.data=state.data.map(function(pool){var userPoolData=userData.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},pool),{},{userData:userPoolData});});},updatePoolsUserData:function updatePoolsUserData(state,action){var _state$data$index;var _action$payload=action.payload,field=_action$payload.field,value=_action$payload.value,sousId=_action$payload.sousId;var index=state.data.findIndex(function(p){return p.sousId===sousId;});state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:_objectSpread(_objectSpread({},(_state$data$index=state.data[index])===null||_state$data$index===void 0?void 0:_state$data$index.userData),{},_defineProperty({},field,value))});}}});// Actions\nvar _PoolsSlice$actions=PoolsSlice.actions,setPoolsPublicData=_PoolsSlice$actions.setPoolsPublicData,setPoolsUserData=_PoolsSlice$actions.setPoolsUserData,updatePoolsUserData=_PoolsSlice$actions.updatePoolsUserData;// Thunks\nexport{setPoolsPublicData,setPoolsUserData,updatePoolsUserData};export var fetchPoolsPublicDataAsync=function fetchPoolsPublicDataAsync(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var blockLimits,totalStakings,liveData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchPoolsBlockLimits();case 2:blockLimits=_context.sent;_context.next=5;return fetchPoolsTotalStaking();case 5:totalStakings=_context.sent;liveData=poolsConfig.map(function(pool){var blockLimit=blockLimits.find(function(entry){return entry.sousId===pool.sousId;});var totalStaking=totalStakings.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},blockLimit),totalStaking);});dispatch(setPoolsPublicData(liveData));case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchPoolsUserDataAsync=function fetchPoolsUserDataAsync(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var allowances,stakingTokenBalances,stakedBalances,pendingRewards,userData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context2.sent;_context2.next=5;return fetchUserBalances(account);case 5:stakingTokenBalances=_context2.sent;_context2.next=8;return fetchUserStakeBalances(account);case 8:stakedBalances=_context2.sent;_context2.next=11;return fetchUserPendingRewards(account);case 11:pendingRewards=_context2.sent;userData=poolsConfig.map(function(pool){return{sousId:pool.sousId,allowance:allowances[pool.sousId],stakingTokenBalance:stakingTokenBalances[pool.sousId],stakedBalance:stakedBalances[pool.sousId],pendingReward:pendingRewards[pool.sousId]};});dispatch(setPoolsUserData(userData));case 14:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var updateUserAllowance=function updateUserAllowance(sousId,account){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var allowances;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context3.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'allowance',value:allowances[sousId]}));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var updateUserBalance=function updateUserBalance(sousId,account){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var tokenBalances;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetchUserBalances(account);case 2:tokenBalances=_context4.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'stakingTokenBalance',value:tokenBalances[sousId]}));case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export var updateUserStakedBalance=function updateUserStakedBalance(sousId,account){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var stakedBalances;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetchUserStakeBalances(account);case 2:stakedBalances=_context5.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'stakedBalance',value:stakedBalances[sousId]}));case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5){return _ref5.apply(this,arguments);};}();};export var updateUserPendingReward=function updateUserPendingReward(sousId,account){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var pendingRewards;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetchUserPendingRewards(account);case 2:pendingRewards=_context6.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'pendingReward',value:pendingRewards[sousId]}));case 4:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x6){return _ref6.apply(this,arguments);};}();};export default PoolsSlice.reducer;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/state/pools/index.ts"],"names":["createSlice","poolsConfig","fetchPoolsBlockLimits","fetchPoolsTotalStaking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","initialState","data","PoolsSlice","name","reducers","setPoolsPublicData","state","action","livePoolsData","payload","map","pool","livePoolData","find","entry","sousId","setPoolsUserData","userData","userPoolData","updatePoolsUserData","field","value","index","findIndex","p","actions","fetchPoolsPublicDataAsync","dispatch","blockLimits","totalStakings","liveData","blockLimit","totalStaking","fetchPoolsUserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","updateUserAllowance","updateUserBalance","tokenBalances","updateUserStakedBalance","updateUserPendingReward","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index]?.userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}
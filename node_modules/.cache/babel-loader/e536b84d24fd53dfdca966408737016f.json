{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _objectSpread from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useCallback,useState}from'react';import{useRouteMatch}from'react-router-dom';import{useDispatch}from'react-redux';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import{BLOCKS_PER_YEAR}from'config';import Page from'components/layout/Page';import{useFarms,usePriceBnbBusd,usePriceCakeBusd}from'state/hooks';import useRefresh from'hooks/useRefresh';import{fetchFarmUserDataAsync}from'state/actions';import{QuoteToken}from'config/constants/types';import useI18n from'hooks/useI18n';import FarmCard from'./components/FarmCard/FarmCard';var Farms=function Farms(farmsProps){var _useRouteMatch=useRouteMatch(),path=_useRouteMatch.path;var TranslateString=useI18n();var farmsLP=useFarms();var cakePrice=usePriceCakeBusd();var bnbPrice=usePriceBnbBusd();var _useWallet=useWallet(),account=_useWallet.account,ethereum=_useWallet.ethereum;var tokenMode=farmsProps.tokenMode;var dispatch=useDispatch();var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){if(account){dispatch(fetchFarmUserDataAsync(account));}},[account,dispatch,fastRefresh]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),stakedOnly=_useState2[0],setStakedOnly=_useState2[1];var activeFarms=farmsLP.filter(function(farm){return!!farm.isTokenOnly===!!tokenMode&&farm.multiplier!=='0X'&&farm.pid!==8;});var inactiveFarms=farmsLP.filter(function(farm){return!!farm.isTokenOnly===!!tokenMode&&farm.multiplier==='0X'&&farm.pid!==8;});var stakedOnlyFarms=activeFarms.filter(function(farm){return farm.userData&&new BigNumber(farm.userData.stakedBalance).isGreaterThan(0);});// /!\\ This function will be removed soon\n// This function compute the APY for each farm and will be replaced when we have a reliable API\n// to retrieve assets prices against USD\nvar farmsList=useCallback(function(farmsToDisplay,removed){// const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n// let userTotalTVL = new BigNumber(0);\n// let userAllowance = 0;\nvar farmsToDisplayWithAPY=farmsToDisplay.map(function(farm){// if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n//   return farm\n// }\nvar cakeRewardPerBlock=new BigNumber(farm.salsaPerBlock||1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));var cakeRewardPerYear=cakeRewardPerBlock.times(BLOCKS_PER_YEAR);// if (farm.userData) {\n//   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\n//   userTotalTVL = userTotalTVL.plus(userShare)\n//   const userWL = Whitelist.find(add => add.wallet === account);\n//   userAllowance = userWL.allowance\n// }\nvar apy=cakePrice.times(cakeRewardPerYear);var totalValue=new BigNumber(farm.lpTotalInQuoteToken||0);if(farm.quoteTokenSymbol===QuoteToken.BNB){totalValue=totalValue.times(bnbPrice);}if(totalValue.comparedTo(0)>0){apy=apy.div(totalValue);}return _objectSpread(_objectSpread({},farm),{},{apy:apy});});return farmsToDisplayWithAPY.map(function(farm){return/*#__PURE__*/_jsx(FarmCard,{farm:farm,removed:removed,bnbPrice:bnbPrice,cakePrice:cakePrice,ethereum:ethereum,account:account},farm.pid);});},[bnbPrice,account,cakePrice,ethereum]);return/*#__PURE__*/_jsx(Page,{children:/*#__PURE__*/_jsx(\"iframe\",{src:\"https://quickswap.exchange/#/add/0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174/0xb3694901fCa2376c40986c1bf5ffdf8781f49389\",title:\"Add Liquidity to Salsa\",height:\"700px\",width:\"100%\"})});};export default Farms;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/Liquidity/Liquidity.tsx"],"names":["React","useEffect","useCallback","useState","useRouteMatch","useDispatch","BigNumber","useWallet","BLOCKS_PER_YEAR","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","pid","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","salsaPerBlock","times","poolWeight","div","pow","cakeRewardPerYear","apy","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","BNB","comparedTo"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => { \r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8)\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8)\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      // let userTotalTVL = new BigNumber(0);\r\n      // let userAllowance = 0;\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.salsaPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        // if (farm.userData) {\r\n        //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\r\n        //   userTotalTVL = userTotalTVL.plus(userShare)\r\n        //   const userWL = Whitelist.find(add => add.wallet === account);\r\n        //   userAllowance = userWL.allowance\r\n        // }\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <iframe src=\"https://quickswap.exchange/#/add/0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174/0xb3694901fCa2376c40986c1bf5ffdf8781f49389\" title=\"Add Liquidity to Salsa\" height='700px' width=\"100%\"/>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"]},"metadata":{},"sourceType":"module"}
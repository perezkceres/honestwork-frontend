{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport poolsConfig from 'config/constants/pools';\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools';\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser';\nconst initialState = {\n  data: [...poolsConfig]\n};\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData = action.payload;\n      state.data = state.data.map(pool => {\n        const livePoolData = livePoolsData.find(entry => entry.sousId === pool.sousId);\n        return { ...pool,\n          ...livePoolData\n        };\n      });\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = state.data.map(pool => {\n        const userPoolData = userData.find(entry => entry.sousId === pool.sousId);\n        return { ...pool,\n          userData: userPoolData\n        };\n      });\n    },\n    updatePoolsUserData: (state, action) => {\n      var _state$data$index;\n\n      const {\n        field,\n        value,\n        sousId\n      } = action.payload;\n      const index = state.data.findIndex(p => p.sousId === sousId);\n      state.data[index] = { ...state.data[index],\n        userData: { ...((_state$data$index = state.data[index]) === null || _state$data$index === void 0 ? void 0 : _state$data$index.userData),\n          [field]: value\n        }\n      };\n    }\n  }\n}); // Actions\n\nexport const {\n  setPoolsPublicData,\n  setPoolsUserData,\n  updatePoolsUserData\n} = PoolsSlice.actions; // Thunks\n\nexport const fetchPoolsPublicDataAsync = () => async dispatch => {\n  const blockLimits = await fetchPoolsBlockLimits();\n  const totalStakings = await fetchPoolsTotalStaking();\n  const liveData = poolsConfig.map(pool => {\n    const blockLimit = blockLimits.find(entry => entry.sousId === pool.sousId);\n    const totalStaking = totalStakings.find(entry => entry.sousId === pool.sousId);\n    return { ...blockLimit,\n      ...totalStaking\n    };\n  });\n  dispatch(setPoolsPublicData(liveData));\n};\nexport const fetchPoolsUserDataAsync = account => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  const stakingTokenBalances = await fetchUserBalances(account);\n  const stakedBalances = await fetchUserStakeBalances(account);\n  const pendingRewards = await fetchUserPendingRewards(account);\n  const userData = poolsConfig.map(pool => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId]\n  }));\n  dispatch(setPoolsUserData(userData));\n};\nexport const updateUserAllowance = (sousId, account) => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'allowance',\n    value: allowances[sousId]\n  }));\n};\nexport const updateUserBalance = (sousId, account) => async dispatch => {\n  const tokenBalances = await fetchUserBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakingTokenBalance',\n    value: tokenBalances[sousId]\n  }));\n};\nexport const updateUserStakedBalance = (sousId, account) => async dispatch => {\n  const stakedBalances = await fetchUserStakeBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakedBalance',\n    value: stakedBalances[sousId]\n  }));\n};\nexport const updateUserPendingReward = (sousId, account) => async dispatch => {\n  const pendingRewards = await fetchUserPendingRewards(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'pendingReward',\n    value: pendingRewards[sousId]\n  }));\n};\nexport default PoolsSlice.reducer;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/state/pools/index.ts"],"names":["createSlice","poolsConfig","fetchPoolsBlockLimits","fetchPoolsTotalStaking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","initialState","data","PoolsSlice","name","reducers","setPoolsPublicData","state","action","livePoolsData","payload","map","pool","livePoolData","find","entry","sousId","setPoolsUserData","userData","userPoolData","updatePoolsUserData","field","value","index","findIndex","p","actions","fetchPoolsPublicDataAsync","dispatch","blockLimits","totalStakings","liveData","blockLimit","totalStaking","fetchPoolsUserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","updateUserAllowance","updateUserBalance","tokenBalances","updateUserStakedBalance","updateUserPendingReward","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index]?.userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { unstake, smartChefUnstake } from 'utils/callHelpers';\nimport { useMasterchef, useSmartChef } from './useContract';\n\nconst useUnstake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleUnstake = useCallback(async amount => {\n    const txHash = await unstake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstake, \"zJOfsUBwQjUSBQmKcK0zWz87/wI=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useSmartUnstake = sousId => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const smartChefContract = useSmartChef(sousId);\n  const handleUnstake = useCallback(async amount => {\n    await smartChefUnstake(smartChefContract, amount, account);\n    dispatch(updateUserStakedBalance(String(sousId), account));\n    dispatch(updateUserBalance(String(sousId), account));\n    dispatch(updateUserPendingReward(String(sousId), account));\n  }, [account, dispatch, smartChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s2(useSmartUnstake, \"uS+v+8Dx75bQILi/59wxNCpGbhU=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});\n\nexport default useUnstake;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useUnstake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstake","smartChefUnstake","useMasterchef","useSmartChef","useUnstake","pid","dispatch","account","masterChefContract","handleUnstake","amount","txHash","console","info","onUnstake","useSmartUnstake","sousId","smartChefContract","String"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,sBADF,EAEEC,uBAFF,EAGEC,iBAHF,EAIEC,uBAJF,QAKO,eALP;AAMA,SAASC,OAAT,EAAkBC,gBAAlB,QAA0C,mBAA1C;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;;AAEA,MAAMC,UAAU,GAAIC,GAAD,IAAiB;AAAA;;AAClC,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMc,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,QAAMO,aAAa,GAAGhB,WAAW,CAC/B,MAAOiB,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMX,OAAO,CAACQ,kBAAD,EAAqBH,GAArB,EAA0BK,MAA1B,EAAkCH,OAAlC,CAA5B;AACAD,IAAAA,QAAQ,CAACV,sBAAsB,CAACW,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL8B,EAM/B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCH,GAAxC,CAN+B,CAAjC;AASA,SAAO;AAAES,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAfD;;GAAML,U;UACaT,W,EACGD,S,EACOQ,a;;;AAc7B,OAAO,MAAMa,eAAe,GAAIC,MAAD,IAAoB;AAAA;;AACjD,QAAMV,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMuB,iBAAiB,GAAGd,YAAY,CAACa,MAAD,CAAtC;AAEA,QAAMP,aAAa,GAAGhB,WAAW,CAC/B,MAAOiB,MAAP,IAA0B;AACxB,UAAMT,gBAAgB,CAACgB,iBAAD,EAAoBP,MAApB,EAA4BH,OAA5B,CAAtB;AACAD,IAAAA,QAAQ,CAACT,uBAAuB,CAACqB,MAAM,CAACF,MAAD,CAAP,EAAiBT,OAAjB,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACR,iBAAiB,CAACoB,MAAM,CAACF,MAAD,CAAP,EAAiBT,OAAjB,CAAlB,CAAR;AACAD,IAAAA,QAAQ,CAACP,uBAAuB,CAACmB,MAAM,CAACF,MAAD,CAAP,EAAiBT,OAAjB,CAAxB,CAAR;AACD,GAN8B,EAO/B,CAACA,OAAD,EAAUD,QAAV,EAAoBW,iBAApB,EAAuCD,MAAvC,CAP+B,CAAjC;AAUA,SAAO;AAAEF,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAhBM;;IAAMM,e;UACMpB,W,EACGD,S,EACMS,Y;;;AAe5B,eAAeC,UAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, smartChefUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSmartUnstake = (sousId: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await smartChefUnstake(smartChefContract, amount, account)\r\n      dispatch(updateUserStakedBalance(String(sousId), account))\r\n      dispatch(updateUserBalance(String(sousId), account))\r\n      dispatch(updateUserPendingReward(String(sousId), account))\r\n    },\r\n    [account, dispatch, smartChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n"]},"metadata":{},"sourceType":"module"}
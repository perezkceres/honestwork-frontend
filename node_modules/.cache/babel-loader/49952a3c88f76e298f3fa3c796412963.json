{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import erc20ABI from'config/abi/erc20.json';import masterchefABI from'config/abi/masterchef.json';import multicall from'utils/multicall';import farmsConfig from'config/constants/farms';import{getMasterChefAddress}from'utils/addressHelpers';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;export var fetchFarmUserAllowances=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var masterChefAdress,calls,rawLpAllowances,parsedLpAllowances;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:masterChefAdress=getMasterChefAddress();calls=farmsConfig.map(function(farm){var lpContractAddress=farm.isTokenOnly?farm.tokenAddresses[CHAIN_ID]:farm.lpAddresses[CHAIN_ID];return{address:lpContractAddress,name:'allowance',params:[account,masterChefAdress]};});_context.next=4;return multicall(erc20ABI,calls);case 4:rawLpAllowances=_context.sent;parsedLpAllowances=rawLpAllowances.map(function(lpBalance){return new BigNumber(lpBalance).toJSON();});return _context.abrupt(\"return\",parsedLpAllowances);case 7:case\"end\":return _context.stop();}}},_callee);}));return function fetchFarmUserAllowances(_x){return _ref.apply(this,arguments);};}();export var fetchFarmUserTokenBalances=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var calls,rawTokenBalances,parsedTokenBalances;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:calls=farmsConfig.map(function(farm){var lpContractAddress=farm.isTokenOnly?farm.tokenAddresses[CHAIN_ID]:farm.lpAddresses[CHAIN_ID];return{address:lpContractAddress,name:'balanceOf',params:[account]};});_context2.next=3;return multicall(erc20ABI,calls);case 3:rawTokenBalances=_context2.sent;parsedTokenBalances=rawTokenBalances.map(function(tokenBalance){return new BigNumber(tokenBalance).toJSON();});return _context2.abrupt(\"return\",parsedTokenBalances);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchFarmUserTokenBalances(_x2){return _ref2.apply(this,arguments);};}();export var fetchFarmUserStakedBalances=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account){var masterChefAdress,calls,rawStakedBalances,parsedStakedBalances;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:masterChefAdress=getMasterChefAddress();calls=farmsConfig.map(function(farm){return{address:masterChefAdress,name:'userInfo',params:[farm.pid,account]};});_context3.next=4;return multicall(masterchefABI,calls);case 4:rawStakedBalances=_context3.sent;parsedStakedBalances=rawStakedBalances.map(function(stakedBalance){return new BigNumber(stakedBalance[0]._hex).toJSON();});return _context3.abrupt(\"return\",parsedStakedBalances);case 7:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchFarmUserStakedBalances(_x3){return _ref3.apply(this,arguments);};}();export var fetchFarmUserEarnings=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account){var masterChefAdress,calls,rawEarnings,parsedEarnings;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:masterChefAdress=getMasterChefAddress();calls=farmsConfig.map(function(farm){return{address:masterChefAdress,name:'pendingSalsa',params:[farm.pid,account]};});_context4.next=4;return multicall(masterchefABI,calls);case 4:rawEarnings=_context4.sent;parsedEarnings=rawEarnings.map(function(earnings){return new BigNumber(earnings).toJSON();});return _context4.abrupt(\"return\",parsedEarnings);case 7:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchFarmUserEarnings(_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/state/farms/fetchFarmUser.ts"],"names":["BigNumber","erc20ABI","masterchefABI","multicall","farmsConfig","getMasterChefAddress","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarmUserAllowances","account","masterChefAdress","calls","map","farm","lpContractAddress","isTokenOnly","tokenAddresses","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingSalsa',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
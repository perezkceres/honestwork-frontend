{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\nimport { QuoteToken } from '../../config/constants/types';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(farmsConfig.map(async farmConfig => {\n    const lpAdress = farmConfig.lpAddresses[CHAIN_ID];\n    const calls = [// Balance of token in the LP contract\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of quote token on LP contract\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n    let tokenAmount;\n    let lpTotalInQuoteToken;\n    let tokenPriceVsQuote;\n\n    if (farmConfig.isTokenOnly) {\n      //     console.log('here2',\n      //   tokenDecimals,farmConfig\n      // )\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(6));\n\n      if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(1);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n      lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(6)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n    }\n\n    const [info, totalAllocPoint, salsaPerBlock] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }, {\n      address: getMasterChefAddress(),\n      name: 'salsaPerBlock'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      // quoteTokenAmount: quoteTokenAmount,\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n      poolWeight: poolWeight.toNumber(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n      depositFeeBP: info.depositFeeBP,\n      salsaPerBlock: new BigNumber(salsaPerBlock).toNumber()\n    };\n  }));\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","data","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","lpTotalInQuoteToken","tokenPriceVsQuote","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","times","lpTokenRatio","quoteTokenAmount","comparedTo","info","totalAllocPoint","salsaPerBlock","pid","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n    \r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if (farmConfig.isTokenOnly) {\r\n      //     console.log('here2',\r\n      //   tokenDecimals,farmConfig\r\n      // )\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(6));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }else{\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(6))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, salsaPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'salsaPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        salsaPerBlock: new BigNumber(salsaPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}
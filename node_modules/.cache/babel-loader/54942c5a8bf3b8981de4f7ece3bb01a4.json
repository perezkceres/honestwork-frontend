{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/KingOfElephants/Elephants.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { BaseLayout, Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit';\nimport Page from 'components/layout/Page';\nimport { useForest } from 'hooks/useContract';\nimport useRefresh from 'hooks/useRefresh';\nimport { getAllForestData } from 'utils/forestUtils'; // import { useMatchBreakpoints } from '../../../../treedefi-uikit/src/hooks';\n// import QuestionHelper from 'components/QuestionHelper'\n\nimport Hero from './components/Hero';\nimport TillCollapseCard from './components/TillCollapseCard';\nimport ParticipateCard from './components/ParticipateCard';\nimport LastEventsCard from './components/LastEventsCard';\nimport ActualKing from './components/ActualKing';\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 20px;\n  margin-top: 20px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`;\n_c = Cards;\nconst BottomCardBody = styled(CardBody)`\n  background-image: url(/images/forest/twines.png);\n  background-position: top center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n`; // const QuesionHelperPositioner = styled.div`\n//   margin-top: 10px;\n//   margin-right: 10px;\n//   float: right;\n// `\n\n_c2 = BottomCardBody;\n\nconst Forest = () => {\n  _s();\n\n  const forestContract = useForest();\n  const [forestData, setForestData] = useState(null);\n  const {\n    ultraRefresh\n  } = useRefresh(); // const { isXl } = useMatchBreakpoints();\n  // const isMobile = isXl === false;\n  // const marginForText = isMobile ? '40px' : '90px'\n\n  const marginLeft = '10%';\n  useEffect(() => {\n    const allForestData = async () => {\n      const data = await getAllForestData(forestContract);\n      setForestData(data);\n    };\n\n    allForestData();\n  }, [forestContract, ultraRefresh]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(TillCollapseCard, {\n        hasWinner: forestData === null || forestData === void 0 ? void 0 : forestData.hasWinner,\n        nextStartTime: forestData === null || forestData === void 0 ? void 0 : forestData.nextStartTime,\n        lastBidTime: forestData === null || forestData === void 0 ? void 0 : forestData.lastBidTime,\n        endOfAuction: forestData === null || forestData === void 0 ? void 0 : forestData.endOfAuction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Cards, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ParticipateCard, {\n            hasWinner: forestData === null || forestData === void 0 ? void 0 : forestData.hasWinner,\n            nextStartTime: forestData === null || forestData === void 0 ? void 0 : forestData.nextStartTime,\n            bidAmount: forestData === null || forestData === void 0 ? void 0 : forestData.bidAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActualKing, {\n          lastBidder: forestData === null || forestData === void 0 ? void 0 : forestData.lastBidder,\n          hasWinner: forestData === null || forestData === void 0 ? void 0 : forestData.hasWinner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(LastEventsCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        mt: \"24px\",\n        children: /*#__PURE__*/_jsxDEV(BottomCardBody, {\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            mt: \"50px\",\n            ml: marginLeft,\n            mb: \"24px\",\n            size: \"xl\",\n            children: \"The King Of Elephants Game Rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            bold: true,\n            children: \"How to Play?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            children: \"King of the Elephants has a 120 second countdown timer which resets on each bid.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            children: \"Bid is in GAJ and it goes into the Forest pool balance, allowing you to become the current king.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            children: \"When the timer reaches zero, the current king wins the game.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            children: [\"Before another game can start one of the users has to press the restart game button.  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 101\n            }, this), \"This resets the contract and refreshes the cooldown timer before a new game begins.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            bold: true,\n            children: \"Winning\\u2019s distribution?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            children: [\"When the countdown timer ends, Forest pool balance will be distributed as follows: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 98\n            }, this), \"50% credited instantly to winner\\u2019s address (last bidder). \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 73\n            }, this), \"20% carries over to the next round. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 51\n            }, this), \"30% is burned automatically. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 44\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            children: \"Note: Anyone can click on the claim button but the winning share will go to the last bidder.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: marginLeft,\n            mb: \"20px\",\n            color: \"red\",\n            bold: true,\n            children: \"Important Note: All bids are final. Your GAJ cannot be returned after bidding.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Forest, \"2QWudnF8c1R11ViVg35BLdCDzlc=\", false, function () {\n  return [useForest, useRefresh];\n});\n\n_c3 = Forest;\nexport default Forest;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Cards\");\n$RefreshReg$(_c2, \"BottomCardBody\");\n$RefreshReg$(_c3, \"Forest\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/KingOfElephants/Elephants.tsx"],"names":["React","useState","useEffect","styled","BaseLayout","Card","CardBody","Heading","Text","Page","useForest","useRefresh","getAllForestData","Hero","TillCollapseCard","ParticipateCard","LastEventsCard","ActualKing","Cards","theme","mediaQueries","sm","lg","BottomCardBody","Forest","forestContract","forestData","setForestData","ultraRefresh","marginLeft","allForestData","data","hasWinner","nextStartTime","lastBidTime","endOfAuction","bidAmount","lastBidder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { BaseLayout, Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport Page from 'components/layout/Page'\n\nimport { useForest } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { getAllForestData } from 'utils/forestUtils'\n// import { useMatchBreakpoints } from '../../../../treedefi-uikit/src/hooks';\n// import QuestionHelper from 'components/QuestionHelper'\nimport Hero from './components/Hero'\nimport TillCollapseCard from './components/TillCollapseCard'\nimport ParticipateCard from './components/ParticipateCard'\nimport LastEventsCard from './components/LastEventsCard'\nimport ActualKing from './components/ActualKing'\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 20px;\n  margin-top: 20px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\nconst BottomCardBody = styled(CardBody)`\n  background-image: url(/images/forest/twines.png);\n  background-position: top center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n`\n\n\n// const QuesionHelperPositioner = styled.div`\n//   margin-top: 10px;\n//   margin-right: 10px;\n//   float: right;\n// `\n\nconst Forest = () => {\n  const forestContract = useForest()\n  const [forestData, setForestData] = useState(null)\n  const { ultraRefresh } = useRefresh()\n  // const { isXl } = useMatchBreakpoints();\n  // const isMobile = isXl === false;\n  // const marginForText = isMobile ? '40px' : '90px'\n  const marginLeft = '10%'\n\n  useEffect(() => {\n    const allForestData = async () => {\n      const data = await getAllForestData(forestContract)\n      setForestData(data)\n    }\n    allForestData()\n  }, [forestContract, ultraRefresh])\n\n  return (\n    <>\n      <Hero />\n      <Page>\n        <TillCollapseCard\n          hasWinner={forestData?.hasWinner}\n          nextStartTime={forestData?.nextStartTime}\n          lastBidTime={forestData?.lastBidTime}\n          endOfAuction={forestData?.endOfAuction}\n        />\n        <Cards>\n          <div>\n            <ParticipateCard\n              hasWinner={forestData?.hasWinner}\n              nextStartTime={forestData?.nextStartTime}\n              bidAmount={forestData?.bidAmount}\n            />\n          </div>\n          <ActualKing lastBidder={forestData?.lastBidder} hasWinner={forestData?.hasWinner} />\n        </Cards>\n        <Card>\n          <LastEventsCard />\n        </Card>\n        <Card mt=\"24px\">\n          <BottomCardBody>\n            <Heading mt=\"50px\" ml={marginLeft} mb=\"24px\" size=\"xl\">\n              The King Of Elephants Game Rules\n            </Heading>\n            <Text ml={marginLeft} bold>\n              How to Play?\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              King of the Elephants has a 120 second countdown timer which resets on each bid.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Bid is in GAJ and it goes into the Forest pool balance, allowing you to become the current king.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              When the timer reaches zero, the current king wins the game.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Before another game can start one of the users has to press the restart game button.  <br />\n              This resets the contract and refreshes the cooldown timer before a new game begins.\n            </Text>\n            <Text ml={marginLeft} bold>\n              Winning’s distribution?\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              When the countdown timer ends, Forest pool balance will be distributed as follows: <br />\n              50% credited instantly to winner’s address (last bidder). <br />\n              20% carries over to the next round. <br />\n              30% is burned automatically. <br />\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\">\n              Note: Anyone can click on the claim button but the winning share will go to the last bidder.\n            </Text>\n            <Text ml={marginLeft} mb=\"20px\" color=\"red\" bold>\n              Important Note: All bids are final. Your GAJ cannot be returned after bidding.\n            </Text>\n          </BottomCardBody>\n        </Card>\n      </Page>\n    </>\n  )\n}\n\nexport default Forest\n"]},"metadata":{},"sourceType":"module"}
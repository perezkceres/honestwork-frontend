{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers';\nimport { useMasterchef, useSmartChef } from './useContract';\nexport const useHarvest = farmPid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    return txHash;\n  }, [account, dispatch, farmPid, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s(useHarvest, \"UT4quCg5r96YBGnHn7yg5VONUdg=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useAllHarvest = farmPids => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)];\n    }, []);\n    return Promise.all(harvestPromises);\n  }, [account, farmPids, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s2(useAllHarvest, \"MxLQ/Cd4zmOMdglbbhX6+hOW2K0=\", false, function () {\n  return [useWallet, useMasterchef];\n});\n\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const smartChefContract = useSmartChef(sousId);\n  const handleHarvest = useCallback(async () => {\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest;\n    await harvestFn(smartChefContract, account);\n    dispatch(updateUserPendingReward(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s3(useSmartChefHarvest, \"sEBq/v6rYgIp1Ul5nBKdght9EcY=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useHarvest.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserBalance","updateUserPendingReward","smartHarvest","smartHarvestBnb","harvest","useMasterchef","useSmartChef","useHarvest","farmPid","dispatch","account","masterChefContract","handleHarvest","txHash","onReward","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSmartChefHarvest","sousId","isUsingBnb","smartChefContract","harvestFn"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,EAAiCC,iBAAjC,EAAoDC,uBAApD,QAAmF,eAAnF;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,OAAxC,QAAuD,mBAAvD;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAqB;AAAA;;AAC7C,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMc,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,QAAMO,aAAa,GAAGhB,WAAW,CAAC,YAAY;AAC5C,UAAMiB,MAAM,GAAG,MAAMT,OAAO,CAACO,kBAAD,EAAqBH,OAArB,EAA8BE,OAA9B,CAA5B;AACAD,IAAAA,QAAQ,CAACV,sBAAsB,CAACW,OAAD,CAAvB,CAAR;AACA,WAAOG,MAAP;AACD,GAJgC,EAI9B,CAACH,OAAD,EAAUD,QAAV,EAAoBD,OAApB,EAA6BG,kBAA7B,CAJ8B,CAAjC;AAMA,SAAO;AAAEG,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAZM;;GAAML,U;UACMT,W,EACGD,S,EACOQ,a;;;AAW7B,OAAO,MAAMU,aAAa,GAAIC,QAAD,IAAwB;AAAA;;AACnD,QAAM;AAAEN,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMc,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,QAAMO,aAAa,GAAGhB,WAAW,CAAC,YAAY;AAC5C,UAAMqB,eAAe,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACtD,aAAO,CAAC,GAAGD,KAAJ,EAAWf,OAAO,CAACO,kBAAD,EAAqBS,GAArB,EAA0BV,OAA1B,CAAlB,CAAP;AACD,KAFuB,EAErB,EAFqB,CAAxB;AAIA,WAAOW,OAAO,CAACC,GAAR,CAAYL,eAAZ,CAAP;AACD,GANgC,EAM9B,CAACP,OAAD,EAAUM,QAAV,EAAoBL,kBAApB,CAN8B,CAAjC;AAQA,SAAO;AAAEG,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAbM;;IAAMG,a;UACSlB,S,EACOQ,a;;;AAa7B,OAAO,MAAMkB,mBAAmB,GAAG,CAACC,MAAD,EAASC,UAAU,GAAG,KAAtB,KAAgC;AAAA;;AACjE,QAAMhB,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAM6B,iBAAiB,GAAGpB,YAAY,CAACkB,MAAD,CAAtC;AAEA,QAAMZ,aAAa,GAAGhB,WAAW,CAAC,YAAY;AAC5C,UAAM+B,SAAS,GAAGF,UAAU,GAAGtB,eAAH,GAAqBD,YAAjD;AACA,UAAMyB,SAAS,CAACD,iBAAD,EAAoBhB,OAApB,CAAf;AACAD,IAAAA,QAAQ,CAACR,uBAAuB,CAACuB,MAAD,EAASd,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACT,iBAAiB,CAACwB,MAAD,EAASd,OAAT,CAAlB,CAAR;AACD,GALgC,EAK9B,CAACA,OAAD,EAAUD,QAAV,EAAoBgB,UAApB,EAAgCC,iBAAhC,EAAmDF,MAAnD,CAL8B,CAAjC;AAOA,SAAO;AAAEV,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAbM;;IAAMW,mB;UACMzB,W,EACGD,S,EACMS,Y","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest\r\n    await harvestFn(smartChefContract, account)\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
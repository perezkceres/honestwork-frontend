{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import cakeABI from'config/abi/cake.json';import{getContract}from'utils/web3';import{getTokenBalance}from'utils/erc20';import{getLotteryAddress,getCakeAddress}from'utils/addressHelpers';import multicall from'utils/multicall';import erc20 from'config/abi/erc20.json';import useRefresh from'./useRefresh';// const useTokenBalance = (tokenAddress: string) => {\n//   const [balance, setBalance] = useState(new BigNumber(0))\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n//   const { fastRefresh } = useRefresh()\n//\n//   useEffect(() => {\n//     const fetchBalance = async () => {\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\n//       setBalance(new BigNumber(res))\n//     }\n//\n//     if (account && ethereum) {\n//       fetchBalance()\n//     }\n//   }, [account, ethereum, tokenAddress, fastRefresh])\n//\n//   return balance\n// }\nvar useTokenBalance=function useTokenBalance(tokenAddress,_account,_provider){var _useState=useState(new BigNumber(0)),_useState2=_slicedToArray(_useState,2),balance=_useState2[0],setBalance=_useState2[1];var _useWallet=useWallet(),useAccount=_useWallet.account,ethereum=_useWallet.ethereum;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var account=_account||useAccount;var currentProvider=_provider||ethereum;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getTokenBalance(currentProvider,tokenAddress,account);case 2:res=_context.sent;setBalance(new BigNumber(res));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchBalance(){return _ref.apply(this,arguments);};}();if(account&&currentProvider){fetchBalance();}},[account,currentProvider,tokenAddress,fastRefresh]);return balance;};export var useTotalSupply=function useTotalSupply(){var _useRefresh2=useRefresh(),slowRefresh=_useRefresh2.slowRefresh;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),totalSupply=_useState4[0],setTotalSupply=_useState4[1];useEffect(function(){function fetchTotalSupply(){return _fetchTotalSupply.apply(this,arguments);}function _fetchTotalSupply(){_fetchTotalSupply=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var cakeContract,supply;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:cakeContract=getContract(cakeABI,getCakeAddress());_context2.next=3;return cakeContract.methods.totalSupply().call();case 3:supply=_context2.sent;setTotalSupply(new BigNumber(supply));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _fetchTotalSupply.apply(this,arguments);}fetchTotalSupply();},[slowRefresh]);return totalSupply;};export var useBurnedBalance=function useBurnedBalance(tokenAddress){var _useState5=useState(new BigNumber(0)),_useState6=_slicedToArray(_useState5,2),balance=_useState6[0],setBalance=_useState6[1];var _useRefresh3=useRefresh(),slowRefresh=_useRefresh3.slowRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var cakeContract,bal;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:cakeContract=getContract(cakeABI,getCakeAddress());_context3.next=3;return cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();case 3:bal=_context3.sent;setBalance(new BigNumber(bal));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchBalance(){return _ref2.apply(this,arguments);};}();fetchBalance();},[tokenAddress,slowRefresh]);return balance;};export var useLotteryLockedBalance=function useLotteryLockedBalance(tokenAddress){var _useState7=useState(new BigNumber(0)),_useState8=_slicedToArray(_useState7,2),balance=_useState8[0],setBalance=_useState8[1];var _useRefresh4=useRefresh(),slowRefresh=_useRefresh4.slowRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var burnAddress,_yield$multicall,_yield$multicall2,burnedCakeBalance;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:burnAddress=getLotteryAddress();_context4.next=3;return multicall(erc20,[{address:tokenAddress,name:'balanceOf',params:[burnAddress]}]);case 3:_yield$multicall=_context4.sent;_yield$multicall2=_slicedToArray(_yield$multicall,1);burnedCakeBalance=_yield$multicall2[0];if(burnedCakeBalance){_context4.next=8;break;}return _context4.abrupt(\"return\");case 8:setBalance(new BigNumber(burnedCakeBalance));case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchBalance(){return _ref3.apply(this,arguments);};}();fetchBalance();},[slowRefresh,tokenAddress]);if(!balance){return new BigNumber(0);}return balance;};export default useTokenBalance;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","cakeABI","getContract","getTokenBalance","getLotteryAddress","getCakeAddress","multicall","erc20","useRefresh","useTokenBalance","tokenAddress","_account","_provider","balance","setBalance","useAccount","account","ethereum","fastRefresh","currentProvider","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","methods","call","supply","useBurnedBalance","balanceOf","bal","useLotteryLockedBalance","burnAddress","address","name","params","burnedCakeBalance"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport {getLotteryAddress, getCakeAddress} from 'utils/addressHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport useRefresh from './useRefresh'\r\n\r\n// const useTokenBalance = (tokenAddress: string) => {\r\n//   const [balance, setBalance] = useState(new BigNumber(0))\r\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n//   const { fastRefresh } = useRefresh()\r\n//\r\n//   useEffect(() => {\r\n//     const fetchBalance = async () => {\r\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n//       setBalance(new BigNumber(res))\r\n//     }\r\n//\r\n//     if (account && ethereum) {\r\n//       fetchBalance()\r\n//     }\r\n//   }, [account, ethereum, tokenAddress, fastRefresh])\r\n//\r\n//   return balance\r\n// }\r\n\r\nconst useTokenBalance = (tokenAddress: string, _account?: string, _provider?: any) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account: useAccount, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const account = _account || useAccount;\r\n  const currentProvider = _provider || ethereum;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(currentProvider, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && currentProvider) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, currentProvider, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useLotteryLockedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const burnAddress = getLotteryAddress()\r\n      const [burnedCakeBalance] = await multicall(erc20, [\r\n        {\r\n          address: tokenAddress,\r\n          name: 'balanceOf',\r\n          params: [burnAddress],\r\n        },\r\n      ])\r\n\r\n      if (!burnedCakeBalance) return\r\n\r\n      setBalance(new BigNumber(burnedCakeBalance))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [slowRefresh, tokenAddress])\r\n\r\n  if (!balance) {\r\n    return new BigNumber(0)\r\n  }\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"]},"metadata":{},"sourceType":"module"}
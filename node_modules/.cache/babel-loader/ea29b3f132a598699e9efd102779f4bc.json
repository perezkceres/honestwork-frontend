{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/Home/components/Timer.tsx\";\nimport React from 'react';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport styled from 'styled-components';\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 15,\n  trailColor: \"#126e82\"\n};\n\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this);\n}; // eslint-disable-next-line no-bitwise\n\n\nconst getTimeSeconds = time => minuteSeconds - time | 0; // eslint-disable-next-line no-bitwise\n\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0; // eslint-disable-next-line no-bitwise\n\n\nconst getTimeHours = time => time % daySeconds / hourSeconds | 0; // eslint-disable-next-line no-bitwise\n\n\nconst getTimeDays = time => time / daySeconds | 0;\n\nconst TimerBox = styled.div`\n  display: flex;\n  justify-content: space-around;\n  font-family: sans-serif;\n  text-align: center;\n  padding-top: 20px;\n  margin-bottom: 40px;\n  `;\n_c = TimerBox;\n\nconst Timer = () => {\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n\n  const endTime = 1635532200; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n  return /*#__PURE__*/_jsxDEV(TimerBox, {\n    children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#51c4d3\",\n      duration: daysDuration,\n      initialRemainingTime: remainingTime,\n      children: ({\n        elapsedTime\n      }) => renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#51c4d3\",\n      duration: daySeconds,\n      initialRemainingTime: remainingTime % daySeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > hourSeconds, 10],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#51c4d3\",\n      duration: hourSeconds,\n      initialRemainingTime: remainingTime % hourSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > minuteSeconds, 10],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: \"#51c4d3\",\n      duration: minuteSeconds,\n      initialRemainingTime: remainingTime % minuteSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > 0, 10],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Timer;\nexport default Timer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TimerBox\");\n$RefreshReg$(_c2, \"Timer\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/views/Home/components/Timer.tsx"],"names":["React","CountdownCircleTimer","styled","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","trailColor","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","getTimeHours","getTimeDays","TimerBox","div","Timer","stratTime","Date","now","endTime","remainingTime","days","Math","ceil","daysDuration","elapsedTime","totalElapsedTime"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport styled from 'styled-components'\n\nconst minuteSeconds = 60;\n  const hourSeconds = 3600;\n  const daySeconds = 86400;\n  \n  const timerProps = {\n    isPlaying: true,\n    size: 120,\n    strokeWidth: 15,\n    trailColor: \"#126e82\"\n  };\n  \n  const renderTime = (dimension, time) => {\n    return (\n      <div className=\"time-wrapper\">\n        <div className=\"time\">{time}</div>\n        <div>{dimension}</div>\n      </div>\n    );\n  };\n  \n  // eslint-disable-next-line no-bitwise\n  const getTimeSeconds = (time) => (minuteSeconds - time) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeDays = (time) => (time / daySeconds) | 0;\n\nconst TimerBox = styled.div`\n  display: flex;\n  justify-content: space-around;\n  font-family: sans-serif;\n  text-align: center;\n  padding-top: 20px;\n  margin-bottom: 40px;\n  `\nconst Timer = () => {\n\n\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n  const endTime = 1635532200; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n  <TimerBox>\n    <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > hourSeconds, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > minuteSeconds, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#51c4d3\"\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > 0, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n    </TimerBox>\n  )\n  \n};\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}
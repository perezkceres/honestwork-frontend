{"ast":null,"code":"const getLastBidTime = forestContract => {\n  return forestContract.methods.lastBidTime().call();\n};\n\nconst getLastBidder = forestContract => {\n  return forestContract.methods.lastBidder().call();\n};\n\nconst getHasWinner = forestContract => {\n  return forestContract.methods.hasWinner().call();\n};\n\nconst getNextStartTime = forestContract => {\n  return forestContract.methods.nextStartTime().call();\n};\n\nconst getBidAmount = forestContract => {\n  return forestContract.methods.bidAmount().call();\n};\n\nconst getEndDelay = forestContract => {\n  return forestContract.methods.endDelay().call();\n}; // export const getCollapseData = async (forestContract) => {\n//   const lastBidTime = parseInt(await getLastBidTime(forestContract))\n//   const endDelay = parseInt(await getEndDelay(forestContract))\n//   return {\n//     lastBidTime,\n//     endDelay,\n//     collapseDate: (lastBidTime + endDelay) * 1000,\n//   }\n// }\n// Fetch all data in one function\n// It would be better to have a structure to fetch from the smart contract\n// eslint-disable-next-line import/prefer-default-export\n\n\nexport const getAllForestData = async forestContract => {\n  const lastBidder = await getLastBidder(forestContract);\n  const hasWinner = await getHasWinner(forestContract);\n  const nextStartTime = await getNextStartTime(forestContract);\n  const bidAmount = await getBidAmount(forestContract);\n  const lastBidTime = parseInt(await getLastBidTime(forestContract));\n\n  const _endDelay = parseInt(await getEndDelay(forestContract));\n\n  const endOfAuction = (lastBidTime + _endDelay) * 1000;\n  return {\n    lastBidTime,\n    lastBidder,\n    hasWinner,\n    nextStartTime,\n    bidAmount,\n    endOfAuction\n  };\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/utils/forestUtils.ts"],"names":["getLastBidTime","forestContract","methods","lastBidTime","call","getLastBidder","lastBidder","getHasWinner","hasWinner","getNextStartTime","nextStartTime","getBidAmount","bidAmount","getEndDelay","endDelay","getAllForestData","parseInt","_endDelay","endOfAuction"],"mappings":"AAAA,MAAMA,cAAc,GAAIC,cAAD,IAAoB;AACvC,SAAOA,cAAc,CAACC,OAAf,CAAuBC,WAAvB,GAAqCC,IAArC,EAAP;AACD,CAFH;;AAIG,MAAMC,aAAa,GAAIJ,cAAD,IAAoB;AACzC,SAAOA,cAAc,CAACC,OAAf,CAAuBI,UAAvB,GAAoCF,IAApC,EAAP;AACD,CAFA;;AAIA,MAAMG,YAAY,GAAIN,cAAD,IAAoB;AACxC,SAAOA,cAAc,CAACC,OAAf,CAAuBM,SAAvB,GAAmCJ,IAAnC,EAAP;AACD,CAFA;;AAIA,MAAMK,gBAAgB,GAAIR,cAAD,IAAoB;AAC5C,SAAOA,cAAc,CAACC,OAAf,CAAuBQ,aAAvB,GAAuCN,IAAvC,EAAP;AACD,CAFA;;AAIA,MAAMO,YAAY,GAAIV,cAAD,IAAoB;AACxC,SAAOA,cAAc,CAACC,OAAf,CAAuBU,SAAvB,GAAmCR,IAAnC,EAAP;AACD,CAFA;;AAID,MAAMS,WAAW,GAAIZ,cAAD,IAAoB;AACtC,SAAOA,cAAc,CAACC,OAAf,CAAuBY,QAAvB,GAAkCV,IAAlC,EAAP;AACD,CAFD,C,CAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AACA,OAAO,MAAMW,gBAAgB,GAAG,MAAOd,cAAP,IAA0B;AACxD,QAAMK,UAAU,GAAG,MAAMD,aAAa,CAACJ,cAAD,CAAtC;AACA,QAAMO,SAAS,GAAG,MAAMD,YAAY,CAACN,cAAD,CAApC;AACA,QAAMS,aAAa,GAAG,MAAMD,gBAAgB,CAACR,cAAD,CAA5C;AACA,QAAMW,SAAS,GAAG,MAAMD,YAAY,CAACV,cAAD,CAApC;AACA,QAAME,WAAW,GAAGa,QAAQ,CAAC,MAAMhB,cAAc,CAACC,cAAD,CAArB,CAA5B;;AACA,QAAMgB,SAAS,GAAGD,QAAQ,CAAC,MAAMH,WAAW,CAACZ,cAAD,CAAlB,CAA1B;;AACA,QAAMiB,YAAY,GAAG,CAACf,WAAW,GAAGc,SAAf,IAA4B,IAAjD;AACA,SAAO;AACLd,IAAAA,WADK;AAELG,IAAAA,UAFK;AAGLE,IAAAA,SAHK;AAILE,IAAAA,aAJK;AAKLE,IAAAA,SALK;AAMLM,IAAAA;AANK,GAAP;AAQD,CAhBM","sourcesContent":["const getLastBidTime = (forestContract) => {\n    return forestContract.methods.lastBidTime().call()\n  }\n  \n   const getLastBidder = (forestContract) => {\n    return forestContract.methods.lastBidder().call()\n  }\n  \n   const getHasWinner = (forestContract) => {\n    return forestContract.methods.hasWinner().call()\n  }\n  \n   const getNextStartTime = (forestContract) => {\n    return forestContract.methods.nextStartTime().call()\n  }\n  \n   const getBidAmount = (forestContract) => {\n    return forestContract.methods.bidAmount().call()\n  }\n  \n  const getEndDelay = (forestContract) => {\n    return forestContract.methods.endDelay().call()\n  }\n  \n  // export const getCollapseData = async (forestContract) => {\n  //   const lastBidTime = parseInt(await getLastBidTime(forestContract))\n  //   const endDelay = parseInt(await getEndDelay(forestContract))\n  \n  //   return {\n  //     lastBidTime,\n  //     endDelay,\n  //     collapseDate: (lastBidTime + endDelay) * 1000,\n  //   }\n  // }\n  \n  // Fetch all data in one function\n  // It would be better to have a structure to fetch from the smart contract\n  \n  // eslint-disable-next-line import/prefer-default-export\n  export const getAllForestData = async (forestContract) => {\n    const lastBidder = await getLastBidder(forestContract)\n    const hasWinner = await getHasWinner(forestContract)\n    const nextStartTime = await getNextStartTime(forestContract)\n    const bidAmount = await getBidAmount(forestContract)\n    const lastBidTime = parseInt(await getLastBidTime(forestContract))\n    const _endDelay = parseInt(await getEndDelay(forestContract))\n    const endOfAuction = (lastBidTime + _endDelay) * 1000\n    return {\n      lastBidTime,\n      lastBidder,\n      hasWinner,\n      nextStartTime,\n      bidAmount,\n      endOfAuction,\n    }\n  }"]},"metadata":{},"sourceType":"module"}
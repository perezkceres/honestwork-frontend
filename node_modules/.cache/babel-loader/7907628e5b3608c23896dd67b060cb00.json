{"ast":null,"code":"import pools from 'config/constants/pools';\nimport erc20ABI from 'config/abi/erc20.json';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport { QuoteToken } from 'config/constants/types';\nimport multicall from 'utils/multicall';\nimport { getWeb3 } from 'utils/web3';\nimport BigNumber from 'bignumber.js';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID; // Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\n\nconst nonBnbPools = pools.filter(p => p.stakingTokenName !== QuoteToken.BNB);\nconst bnbPools = pools.filter(p => p.stakingTokenName === QuoteToken.BNB);\nconst web3 = getWeb3();\nexport const fetchPoolsAllowance = async account => {\n  const calls = nonBnbPools.map(p => ({\n    address: p.stakingTokenAddress[CHAIN_ID],\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]]\n  }));\n  const allowances = await multicall(erc20ABI, calls);\n  return nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(allowances[index]).toJSON()\n  }), {});\n};\nexport const fetchUserBalances = async account => {\n  // Non BNB pools\n  const calls = nonBnbPools.map(p => ({\n    address: p.stakingTokenAddress[CHAIN_ID],\n    name: 'balanceOf',\n    params: [account]\n  }));\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n  const tokenBalances = nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON()\n  }), {}); // BNB pools\n\n  const bnbBalance = await web3.eth.getBalance(account);\n  const bnbBalances = bnbPools.reduce((acc, pool) => ({ ...acc,\n    [pool.sousId]: new BigNumber(bnbBalance).toJSON()\n  }), {});\n  return { ...tokenBalances,\n    ...bnbBalances\n  };\n};\nexport const fetchUserStakeBalances = async account => {\n  const cakePools = pools;\n  const cakeUserInfo = await multicall(sousChefABI, cakePools.map(p => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account]\n  })));\n  return { ...pools.reduce((acc, pool, index) => {\n      var _cakeUserInfo$index;\n\n      return { ...acc,\n        [pool.sousId]: new BigNumber((_cakeUserInfo$index = cakeUserInfo[index]) === null || _cakeUserInfo$index === void 0 ? void 0 : _cakeUserInfo$index.amount._hex).toJSON()\n      };\n    }, {})\n  };\n};\nexport const fetchUserPendingRewards = async account => {\n  const cakePools = pools;\n  const res = await multicall(sousChefABI, cakePools.map(p => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account]\n  })));\n  return { ...pools.reduce((acc, pool, index) => ({ ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON()\n    }), {})\n  };\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/state/pools/fetchPoolsUser.ts"],"names":["pools","erc20ABI","sousChefABI","QuoteToken","multicall","getWeb3","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","nonBnbPools","filter","p","stakingTokenName","BNB","bnbPools","web3","fetchPoolsAllowance","account","calls","map","address","stakingTokenAddress","name","params","contractAddress","allowances","reduce","acc","pool","index","sousId","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","bnbBalance","eth","getBalance","bnbBalances","fetchUserStakeBalances","cakePools","cakeUserInfo","amount","_hex","fetchUserPendingRewards","res"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGX,KAAK,CAACY,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACC,gBAAF,KAAuBX,UAAU,CAACY,GAAtD,CAApB;AACA,MAAMC,QAAQ,GAAGhB,KAAK,CAACY,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACC,gBAAF,KAAuBX,UAAU,CAACY,GAAtD,CAAjB;AACA,MAAME,IAAI,GAAGZ,OAAO,EAApB;AAEA,OAAO,MAAMa,mBAAmB,GAAG,MAAOC,OAAP,IAAmB;AACpD,QAAMC,KAAK,GAAGT,WAAW,CAACU,GAAZ,CAAiBR,CAAD,KAAQ;AACpCS,IAAAA,OAAO,EAAET,CAAC,CAACU,mBAAF,CAAsBhB,QAAtB,CAD2B;AAEpCiB,IAAAA,IAAI,EAAE,WAF8B;AAGpCC,IAAAA,MAAM,EAAE,CAACN,OAAD,EAAUN,CAAC,CAACa,eAAF,CAAkBnB,QAAlB,CAAV;AAH4B,GAAR,CAAhB,CAAd;AAMA,QAAMoB,UAAU,GAAG,MAAMvB,SAAS,CAACH,QAAD,EAAWmB,KAAX,CAAlC;AACA,SAAOT,WAAW,CAACiB,MAAZ,CACL,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EAAE,GAAGF,GAAL;AAAU,KAACC,IAAI,CAACE,MAAN,GAAe,IAAI1B,SAAJ,CAAcqB,UAAU,CAACI,KAAD,CAAxB,EAAiCE,MAAjC;AAAzB,GAAvB,CADK,EAEL,EAFK,CAAP;AAID,CAZM;AAcP,OAAO,MAAMC,iBAAiB,GAAG,MAAOf,OAAP,IAAmB;AAClD;AACA,QAAMC,KAAK,GAAGT,WAAW,CAACU,GAAZ,CAAiBR,CAAD,KAAQ;AACpCS,IAAAA,OAAO,EAAET,CAAC,CAACU,mBAAF,CAAsBhB,QAAtB,CAD2B;AAEpCiB,IAAAA,IAAI,EAAE,WAF8B;AAGpCC,IAAAA,MAAM,EAAE,CAACN,OAAD;AAH4B,GAAR,CAAhB,CAAd;AAKA,QAAMgB,gBAAgB,GAAG,MAAM/B,SAAS,CAACH,QAAD,EAAWmB,KAAX,CAAxC;AACA,QAAMgB,aAAa,GAAGzB,WAAW,CAACiB,MAAZ,CACpB,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EAAE,GAAGF,GAAL;AAAU,KAACC,IAAI,CAACE,MAAN,GAAe,IAAI1B,SAAJ,CAAc6B,gBAAgB,CAACJ,KAAD,CAA9B,EAAuCE,MAAvC;AAAzB,GAAvB,CADoB,EAEpB,EAFoB,CAAtB,CARkD,CAalD;;AACA,QAAMI,UAAU,GAAG,MAAMpB,IAAI,CAACqB,GAAL,CAASC,UAAT,CAAoBpB,OAApB,CAAzB;AACA,QAAMqB,WAAW,GAAGxB,QAAQ,CAACY,MAAT,CAClB,CAACC,GAAD,EAAMC,IAAN,MAAgB,EAAE,GAAGD,GAAL;AAAU,KAACC,IAAI,CAACE,MAAN,GAAe,IAAI1B,SAAJ,CAAc+B,UAAd,EAA0BJ,MAA1B;AAAzB,GAAhB,CADkB,EAElB,EAFkB,CAApB;AAKA,SAAO,EAAE,GAAGG,aAAL;AAAoB,OAAGI;AAAvB,GAAP;AACD,CArBM;AAuBP,OAAO,MAAMC,sBAAsB,GAAG,MAAOtB,OAAP,IAAmB;AACvD,QAAMuB,SAAS,GAAG1C,KAAlB;AACA,QAAM2C,YAAY,GAAG,MAAMvC,SAAS,CAClCF,WADkC,EAElCwC,SAAS,CAACrB,GAAV,CAAeR,CAAD,KAAQ;AACpBS,IAAAA,OAAO,EAAET,CAAC,CAACa,eAAF,CAAkBnB,QAAlB,CADW;AAEpBiB,IAAAA,IAAI,EAAE,UAFc;AAGpBC,IAAAA,MAAM,EAAE,CAACN,OAAD;AAHY,GAAR,CAAd,CAFkC,CAApC;AASA,SAAO,EACL,GAAGnB,KAAK,CAAC4B,MAAN,CACD,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ;AAAA;;AAAA,aAAuB,EACrB,GAAGF,GADkB;AAErB,SAACC,IAAI,CAACE,MAAN,GAAe,IAAI1B,SAAJ,wBAAcqC,YAAY,CAACZ,KAAD,CAA1B,wDAAc,oBAAqBa,MAArB,CAA4BC,IAA1C,EAAgDZ,MAAhD;AAFM,OAAvB;AAAA,KADC,EAKD,EALC;AADE,GAAP;AASD,CApBM;AAsBP,OAAO,MAAMa,uBAAuB,GAAG,MAAO3B,OAAP,IAAmB;AACxD,QAAMuB,SAAS,GAAG1C,KAAlB;AACA,QAAM+C,GAAG,GAAG,MAAM3C,SAAS,CACzBF,WADyB,EAEzBwC,SAAS,CAACrB,GAAV,CAAeR,CAAD,KAAQ;AACpBS,IAAAA,OAAO,EAAET,CAAC,CAACa,eAAF,CAAkBnB,QAAlB,CADW;AAEpBiB,IAAAA,IAAI,EAAE,eAFc;AAGpBC,IAAAA,MAAM,EAAE,CAACN,OAAD;AAHY,GAAR,CAAd,CAFyB,CAA3B;AASA,SAAO,EACL,GAAGnB,KAAK,CAAC4B,MAAN,CACD,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EACrB,GAAGF,GADkB;AAErB,OAACC,IAAI,CAACE,MAAN,GAAe,IAAI1B,SAAJ,CAAcyC,GAAG,CAAChB,KAAD,CAAjB,EAA0BE,MAA1B;AAFM,KAAvB,CADC,EAKD,EALC;AADE,GAAP;AASD,CApBM","sourcesContent":["import pools from 'config/constants/pools'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = pools.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = pools.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst web3 = getWeb3()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress[CHAIN_ID],\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress[CHAIN_ID],\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const cakePools = pools\r\n  const cakeUserInfo = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((p) => ({\r\n      address: p.contractAddress[CHAIN_ID],\r\n      name: 'userInfo',\r\n      params: [account],\r\n    })),\r\n  )\r\n\r\n  return {\r\n    ...pools.reduce(\r\n      (acc, pool, index) => ({\r\n        ...acc,\r\n        [pool.sousId]: new BigNumber(cakeUserInfo[index]?.amount._hex).toJSON(),\r\n      }),\r\n      {},\r\n    ),\r\n  }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const cakePools = pools\r\n  const res = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((p) => ({\r\n      address: p.contractAddress[CHAIN_ID],\r\n      name: 'pendingReward',\r\n      params: [account],\r\n    })),\r\n  )\r\n\r\n  return {\r\n    ...pools.reduce(\r\n      (acc, pool, index) => ({\r\n        ...acc,\r\n        [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n      }),\r\n      {},\r\n    ),\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
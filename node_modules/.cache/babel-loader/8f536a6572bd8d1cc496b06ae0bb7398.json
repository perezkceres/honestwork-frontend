{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"../core\");\n\nvar Glossaries = /*#__PURE__*/function (_core_1$CrowdinApi) {\n  _inherits(Glossaries, _core_1$CrowdinApi);\n\n  var _super = _createSuper(Glossaries);\n\n  function Glossaries() {\n    _classCallCheck(this, Glossaries);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Glossaries, [{\n    key: \"listGlossaries\",\n\n    /**\n     * @param groupId group identifier\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     */\n    value: function listGlossaries(groupId, limit, offset) {\n      var url = \"\".concat(this.url, \"/glossaries\");\n      url = this.addQueryParam(url, 'groupId', groupId);\n      return this.getList(url, limit, offset);\n    }\n    /**\n     * @param request request body\n     */\n\n  }, {\n    key: \"addGlossary\",\n    value: function addGlossary(request) {\n      var url = \"\".concat(this.url, \"/glossaries\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     */\n\n  }, {\n    key: \"getGlossary\",\n    value: function getGlossary(glossaryId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId);\n      return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     */\n\n  }, {\n    key: \"deleteGlossary\",\n    value: function deleteGlossary(glossaryId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId);\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"editGlossary\",\n    value: function editGlossary(glossaryId, request) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId);\n      return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"exportGlossary\",\n    value: function exportGlossary(glossaryId, request) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/exports\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param exportId export identifier\n     */\n\n  }, {\n    key: \"downloadGlossary\",\n    value: function downloadGlossary(glossaryId, exportId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/exports/\").concat(exportId, \"/download\");\n      return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param exportId export identifier\n     */\n\n  }, {\n    key: \"checkGlossaryExportStatus\",\n    value: function checkGlossaryExportStatus(glossaryId, exportId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/exports/\").concat(exportId);\n      return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"importGlossaryFile\",\n    value: function importGlossaryFile(glossaryId, request) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/imports\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param importId import identifier\n     */\n\n  }, {\n    key: \"checkGlossaryImportStatus\",\n    value: function checkGlossaryImportStatus(glossaryId, importId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/imports/\").concat(importId);\n      return this.get(url, this.defaultConfig());\n    }\n  }, {\n    key: \"listTerms\",\n    value: function listTerms(glossaryId, userIdOrRequest, limit, offset, languageId, translationOfTermId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/terms\");\n      var request;\n\n      if (userIdOrRequest && typeof userIdOrRequest === 'object') {\n        request = userIdOrRequest;\n      } else {\n        request = {\n          userId: userIdOrRequest,\n          limit: limit,\n          offset: offset,\n          languageId: languageId,\n          translationOfTermId: translationOfTermId\n        };\n      }\n\n      url = this.addQueryParam(url, 'userId', request.userId);\n      url = this.addQueryParam(url, 'languageId', request.languageId);\n      url = this.addQueryParam(url, 'translationOfTermId', request.translationOfTermId);\n      return this.getList(url, request.limit, request.offset);\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"addTerm\",\n    value: function addTerm(glossaryId, request) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/terms\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param languageId languageId identifier\n     * @param translationOfTermId term translation identifier\n     */\n\n  }, {\n    key: \"clearGlossary\",\n    value: function clearGlossary(glossaryId, languageId, translationOfTermId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/terms\");\n      url = this.addQueryParam(url, 'languageId', languageId);\n      url = this.addQueryParam(url, 'translationOfTermId', translationOfTermId);\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     */\n\n  }, {\n    key: \"getTerm\",\n    value: function getTerm(glossaryId, termId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/terms/\").concat(termId);\n      return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     */\n\n  }, {\n    key: \"deleteTerm\",\n    value: function deleteTerm(glossaryId, termId) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/terms/\").concat(termId);\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"editTerm\",\n    value: function editTerm(glossaryId, termId, request) {\n      var url = \"\".concat(this.url, \"/glossaries/\").concat(glossaryId, \"/terms/\").concat(termId);\n      return this.patch(url, request, this.defaultConfig());\n    }\n  }]);\n\n  return Glossaries;\n}(core_1.CrowdinApi);\n\nexports.Glossaries = Glossaries;\nvar GlossariesModel;\n\n(function (GlossariesModel) {\n  var GlossaryFormat;\n\n  (function (GlossaryFormat) {\n    GlossaryFormat[\"TBX\"] = \"tbx\";\n    GlossaryFormat[\"CSV\"] = \"csv\";\n    GlossaryFormat[\"XLSX\"] = \"xlsx\";\n  })(GlossaryFormat = GlossariesModel.GlossaryFormat || (GlossariesModel.GlossaryFormat = {}));\n\n  var PartOfSpeech;\n\n  (function (PartOfSpeech) {\n    PartOfSpeech[\"ADJECTIVE\"] = \"adjective\";\n    PartOfSpeech[\"ADPOSITION\"] = \"adposition\";\n    PartOfSpeech[\"ADVERB\"] = \"adverb\";\n    PartOfSpeech[\"AUXILIARY\"] = \"auxiliary\";\n    PartOfSpeech[\"COORDINATING_CONJUNCTION\"] = \"coordinating conjunction\";\n    PartOfSpeech[\"DETERMINER\"] = \"determiner\";\n    PartOfSpeech[\"INTERJECTION\"] = \"interjection\";\n    PartOfSpeech[\"NOUN\"] = \"noun\";\n    PartOfSpeech[\"NUMERAL\"] = \"numeral\";\n    PartOfSpeech[\"PARTICLE\"] = \"particle\";\n    PartOfSpeech[\"PRONOUN\"] = \"pronoun\";\n    PartOfSpeech[\"PROPER_NOUN\"] = \"proper noun\";\n    PartOfSpeech[\"SUBORDINATING_CONJUNCTION\"] = \"subordinating conjunction\";\n    PartOfSpeech[\"VERB\"] = \"verb\";\n    PartOfSpeech[\"OTHER\"] = \"other\";\n  })(PartOfSpeech = GlossariesModel.PartOfSpeech || (GlossariesModel.PartOfSpeech = {}));\n})(GlossariesModel = exports.GlossariesModel || (exports.GlossariesModel = {}));","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/@crowdin/crowdin-api-client/out/glossaries/index.js"],"names":["Object","defineProperty","exports","value","core_1","require","Glossaries","groupId","limit","offset","url","addQueryParam","getList","request","post","defaultConfig","glossaryId","get","delete","patch","exportId","importId","userIdOrRequest","languageId","translationOfTermId","userId","termId","CrowdinApi","GlossariesModel","GlossaryFormat","PartOfSpeech"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = require(\"../core\");\nclass Glossaries extends core_1.CrowdinApi {\n    /**\n     * @param groupId group identifier\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     */\n    listGlossaries(groupId, limit, offset) {\n        let url = `${this.url}/glossaries`;\n        url = this.addQueryParam(url, 'groupId', groupId);\n        return this.getList(url, limit, offset);\n    }\n    /**\n     * @param request request body\n     */\n    addGlossary(request) {\n        const url = `${this.url}/glossaries`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     */\n    getGlossary(glossaryId) {\n        const url = `${this.url}/glossaries/${glossaryId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     */\n    deleteGlossary(glossaryId) {\n        const url = `${this.url}/glossaries/${glossaryId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n    editGlossary(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n    exportGlossary(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/exports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param exportId export identifier\n     */\n    downloadGlossary(glossaryId, exportId) {\n        const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}/download`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param exportId export identifier\n     */\n    checkGlossaryExportStatus(glossaryId, exportId) {\n        const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n    importGlossaryFile(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/imports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param importId import identifier\n     */\n    checkGlossaryImportStatus(glossaryId, importId) {\n        const url = `${this.url}/glossaries/${glossaryId}/imports/${importId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    listTerms(glossaryId, userIdOrRequest, limit, offset, languageId, translationOfTermId) {\n        let url = `${this.url}/glossaries/${glossaryId}/terms`;\n        let request;\n        if (userIdOrRequest && typeof userIdOrRequest === 'object') {\n            request = userIdOrRequest;\n        }\n        else {\n            request = { userId: userIdOrRequest, limit, offset, languageId, translationOfTermId };\n        }\n        url = this.addQueryParam(url, 'userId', request.userId);\n        url = this.addQueryParam(url, 'languageId', request.languageId);\n        url = this.addQueryParam(url, 'translationOfTermId', request.translationOfTermId);\n        return this.getList(url, request.limit, request.offset);\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     */\n    addTerm(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param languageId languageId identifier\n     * @param translationOfTermId term translation identifier\n     */\n    clearGlossary(glossaryId, languageId, translationOfTermId) {\n        let url = `${this.url}/glossaries/${glossaryId}/terms`;\n        url = this.addQueryParam(url, 'languageId', languageId);\n        url = this.addQueryParam(url, 'translationOfTermId', translationOfTermId);\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     */\n    getTerm(glossaryId, termId) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     */\n    deleteTerm(glossaryId, termId) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     * @param request request body\n     */\n    editTerm(glossaryId, termId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n}\nexports.Glossaries = Glossaries;\nvar GlossariesModel;\n(function (GlossariesModel) {\n    let GlossaryFormat;\n    (function (GlossaryFormat) {\n        GlossaryFormat[\"TBX\"] = \"tbx\";\n        GlossaryFormat[\"CSV\"] = \"csv\";\n        GlossaryFormat[\"XLSX\"] = \"xlsx\";\n    })(GlossaryFormat = GlossariesModel.GlossaryFormat || (GlossariesModel.GlossaryFormat = {}));\n    let PartOfSpeech;\n    (function (PartOfSpeech) {\n        PartOfSpeech[\"ADJECTIVE\"] = \"adjective\";\n        PartOfSpeech[\"ADPOSITION\"] = \"adposition\";\n        PartOfSpeech[\"ADVERB\"] = \"adverb\";\n        PartOfSpeech[\"AUXILIARY\"] = \"auxiliary\";\n        PartOfSpeech[\"COORDINATING_CONJUNCTION\"] = \"coordinating conjunction\";\n        PartOfSpeech[\"DETERMINER\"] = \"determiner\";\n        PartOfSpeech[\"INTERJECTION\"] = \"interjection\";\n        PartOfSpeech[\"NOUN\"] = \"noun\";\n        PartOfSpeech[\"NUMERAL\"] = \"numeral\";\n        PartOfSpeech[\"PARTICLE\"] = \"particle\";\n        PartOfSpeech[\"PRONOUN\"] = \"pronoun\";\n        PartOfSpeech[\"PROPER_NOUN\"] = \"proper noun\";\n        PartOfSpeech[\"SUBORDINATING_CONJUNCTION\"] = \"subordinating conjunction\";\n        PartOfSpeech[\"VERB\"] = \"verb\";\n        PartOfSpeech[\"OTHER\"] = \"other\";\n    })(PartOfSpeech = GlossariesModel.PartOfSpeech || (GlossariesModel.PartOfSpeech = {}));\n})(GlossariesModel = exports.GlossariesModel || (exports.GlossariesModel = {}));\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from\"/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from'react';import Web3 from'web3';import{useWallet}from'@binance-chain/bsc-use-wallet';import getRpcUrl from'utils/getRpcUrl';var RPC_URL=getRpcUrl();var httpProvider=new Web3.providers.HttpProvider(RPC_URL,{timeout:10000});/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */var useWeb3=function useWeb3(){var _useWallet=useWallet(),ethereum=_useWallet.ethereum;var refEth=useRef(ethereum);var _useState=useState(new Web3(ethereum||httpProvider)),_useState2=_slicedToArray(_useState,2),web3=_useState2[0],setweb3=_useState2[1];useEffect(function(){if(ethereum!==refEth.current){setweb3(new Web3(ethereum||httpProvider));refEth.current=ethereum;}},[ethereum]);return web3;};export default useWeb3;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/SALSA/Salsa_frontend/src/hooks/useWeb3.ts"],"names":["useEffect","useState","useRef","Web3","useWallet","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","useWeb3","ethereum","refEth","web3","setweb3","current"],"mappings":"qKAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAGA,OAASC,SAAT,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAEA,GAAMC,CAAAA,OAAO,CAAGD,SAAS,EAAzB,CACA,GAAME,CAAAA,YAAY,CAAG,GAAIJ,CAAAA,IAAI,CAACK,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,CAAyC,CAAEI,OAAO,CAAE,KAAX,CAAzC,CAArB,CAEA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,gBAC6BP,SAAS,EADtC,CACZQ,QADY,YACZA,QADY,CAEpB,GAAMC,CAAAA,MAAM,CAAGX,MAAM,CAACU,QAAD,CAArB,CAFoB,cAGIX,QAAQ,CAAC,GAAIE,CAAAA,IAAJ,CAASS,QAAQ,EAAIL,YAArB,CAAD,CAHZ,wCAGbO,IAHa,eAGPC,OAHO,eAKpBf,SAAS,CAAC,UAAM,CACd,GAAIY,QAAQ,GAAKC,MAAM,CAACG,OAAxB,CAAiC,CAC/BD,OAAO,CAAC,GAAIZ,CAAAA,IAAJ,CAASS,QAAQ,EAAIL,YAArB,CAAD,CAAP,CACAM,MAAM,CAACG,OAAP,CAAiBJ,QAAjB,CACD,CACF,CALQ,CAKN,CAACA,QAAD,CALM,CAAT,CAOA,MAAOE,CAAAA,IAAP,CACD,CAbD,CAeA,cAAeH,CAAAA,OAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n"]},"metadata":{},"sourceType":"module"}
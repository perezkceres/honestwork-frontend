"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const dictionaries_1 = require("./dictionaries");
const distributions_1 = require("./distributions");
const glossaries_1 = require("./glossaries");
const issues_1 = require("./issues");
const labels_1 = require("./labels");
const languages_1 = require("./languages");
const machineTranslation_1 = require("./machineTranslation");
const projectsGroups_1 = require("./projectsGroups");
const reports_1 = require("./reports");
const screenshots_1 = require("./screenshots");
const sourceFiles_1 = require("./sourceFiles");
const sourceStrings_1 = require("./sourceStrings");
const stringComments_1 = require("./stringComments");
const stringTranslations_1 = require("./stringTranslations");
const tasks_1 = require("./tasks");
const teams_1 = require("./teams");
const translationMemory_1 = require("./translationMemory");
const translations_1 = require("./translations");
const translationStatus_1 = require("./translationStatus");
const uploadStorage_1 = require("./uploadStorage");
const users_1 = require("./users");
const vendors_1 = require("./vendors");
const webhooks_1 = require("./webhooks");
const workflows_1 = require("./workflows");
__export(require("./core"));
__export(require("./dictionaries"));
__export(require("./distributions"));
__export(require("./glossaries"));
__export(require("./issues"));
__export(require("./labels"));
__export(require("./languages"));
__export(require("./machineTranslation"));
__export(require("./projectsGroups"));
__export(require("./reports"));
__export(require("./screenshots"));
__export(require("./sourceFiles"));
__export(require("./sourceStrings"));
__export(require("./stringComments"));
__export(require("./stringTranslations"));
__export(require("./tasks"));
__export(require("./teams"));
__export(require("./translationMemory"));
__export(require("./translations"));
__export(require("./translationStatus"));
__export(require("./uploadStorage"));
__export(require("./users"));
__export(require("./vendors"));
__export(require("./webhooks"));
__export(require("./workflows"));
class Client {
    constructor(credentials, config) {
        this.sourceFilesApi = new sourceFiles_1.SourceFiles(credentials, config);
        this.glossariesApi = new glossaries_1.Glossaries(credentials, config);
        this.languagesApi = new languages_1.Languages(credentials, config);
        this.translationsApi = new translations_1.Translations(credentials, config);
        this.translationStatusApi = new translationStatus_1.TranslationStatus(credentials, config);
        this.projectsGroupsApi = new projectsGroups_1.ProjectsGroups(credentials, config);
        this.reportsApi = new reports_1.Reports(credentials, config);
        this.screenshotsApi = new screenshots_1.Screenshots(credentials, config);
        this.sourceStringsApi = new sourceStrings_1.SourceStrings(credentials, config);
        this.uploadStorageApi = new uploadStorage_1.UploadStorage(credentials, config);
        this.tasksApi = new tasks_1.Tasks(credentials, config);
        this.translationMemoryApi = new translationMemory_1.TranslationMemory(credentials, config);
        this.webhooksApi = new webhooks_1.Webhooks(credentials, config);
        this.machineTranslationApi = new machineTranslation_1.MachineTranslation(credentials, config);
        this.stringTranslationsApi = new stringTranslations_1.StringTranslations(credentials, config);
        this.workflowsApi = new workflows_1.Workflows(credentials, config);
        this.usersApi = new users_1.Users(credentials, config);
        this.vendorsApi = new vendors_1.Vendors(credentials, config);
        this.issuesApi = new issues_1.Issues(credentials, config);
        this.teamsApi = new teams_1.Teams(credentials, config);
        this.distributionsApi = new distributions_1.Distributions(credentials, config);
        this.dictionariesApi = new dictionaries_1.Dictionaries(credentials, config);
        this.labelsApi = new labels_1.Labels(credentials, config);
        this.stringCommentsApi = new stringComments_1.StringComments(credentials, config);
    }
}
exports.default = Client;

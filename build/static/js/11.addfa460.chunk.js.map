{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","components/Tags.tsx","utils/getLiquidityUrlPathParts.ts","utils/erc20.ts","config/index.ts","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","components/layout/Flex.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/fib.png","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","useSmartStake","sousId","isUsingBnb","dispatch","useDispatch","useWallet","account","smartChefContract","useSmartChef","handleStake","useCallback","amount","a","stakeFn","smartStakeBnb","smartStake","updateUserStakedBalance","String","updateUserBalance","onStake","useStake","pid","masterChefContract","useMasterchef","stake","txHash","fetchFarmUserDataAsync","console","info","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","balance","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","useApprove","lpContract","onApprove","approve","tx","useSousApprove","updateUserAllowance","useSmartUnstake","onUnstake","smartChefUnstake","updateUserPendingReward","useUnstake","unstake","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","FlexLayout","Wrapper","Flex","MultiplierTag","Tag","CardHeading","lpLabel","multiplier","farmImage","risk","tokenSymbol","depositFee","justifyContent","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","bold","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","liquidityUrlPathParts","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","href","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","FarmCard","expanded","removed","bnbPrice","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","honestPerBlock","poolWeight","pow","comparedTo","Page","textAlign","small","fib","exact"],"mappings":"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","file":"static/js/11.addfa460.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\n\r\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\r\n      await stakeFn(smartChefContract, amount, account)\r\n      dispatch(updateUserStakedBalance(String(sousId), account))\r\n      dispatch(updateUserBalance(String(sousId), account))\r\n    },\r\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(0.5)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(15768000)\r\nexport const BSC_BLOCK_TIME = 2\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useLottery, useSmartChef, useForest } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, smartChefContract, account)\r\n      dispatch(updateUserAllowance(String(sousId), account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, smartChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve the forest\r\nexport const useForestApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const forestContract = useForest()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, forestContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, forestContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, smartChefUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport const useSmartUnstake = (sousId: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await smartChefUnstake(smartChefContract, amount, account)\r\n      dispatch(updateUserStakedBalance(String(sousId), account))\r\n      dispatch(updateUserBalance(String(sousId), account))\r\n      dispatch(updateUserPendingReward(String(sousId), account))\r\n    },\r\n    [account, dispatch, smartChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 3 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          Honest\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Honest per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\nalign-self: baseline;\r\nbackground-image: url('/images/egg/farmcard.png');\r\nbackground-size: cover;\r\n\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'HONEST'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'HONEST' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n   \r\n    \r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","export default __webpack_public_path__ + \"static/media/fib.9b40327c.png\";","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading,LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\nimport fib from './fib.png';\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => { \r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid !== 8)\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid !== 8)\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      // let userTotalTVL = new BigNumber(0);\r\n      // let userAllowance = 0;\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.honestPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        // if (farm.userData) {\r\n        //   const userShare = new BigNumber(farm.userData.stakedBalance).div(1000000000000000000).multipliedBy(farm.tokenPriceVsQuote)\r\n        //   userTotalTVL = userTotalTVL.plus(userShare)\r\n        //   const userWL = Whitelist.find(add => add.wallet === account);\r\n        //   userAllowance = userWL.allowance\r\n        // }\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            'Stake tokens to earn honest'\r\n            :\r\n          'Stake LP tokens to earn honest'\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        50% of the Deposit Fee will be used to buyback honest and Burn the Tokens\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        Burn Time: Everyday 18:33 UTC\r\n      </Heading>\r\n      <LinkExternal mb=\"5px\" \r\nstyle={{ textAlign: 'center' }} small href=\"https://honestwork.gitbook.io/honestwork-farms/farms-pools/farm-pumpamentals\">\r\n          <img  width=\"233\" src={ fib } alt=\"fib\"/>\r\n          </LinkExternal>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        50% of the Deposit Fee will be sent to treasury wallet for Future Development \r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        Farms and Pools are live\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n         \r\n            {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n              COMING SOON...\r\n            </Heading> */}\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n              COMING SOON...\r\n            </Heading> */}\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}
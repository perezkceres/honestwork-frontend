{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/Metamask.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","_account","_provider","setBalance","useAccount","ethereum","currentProvider","res","fetchBalance","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","toFixed","id","disabled","length","onClick","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","honestPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","realValue","useTotalValue","StyledTwitterCard","TwitterCard","flexDirection","small","href","dataSource","sourceType","screenName","options","height","chrome","width","TokenImageWrapper","CardImage","token","addWatchJaguarToken","window","request","method","type","symbol","image","console","log","src","alt","marginLeft","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Cookies","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/20.74905559.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendinghonest',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({cakeBalance}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport {getLotteryAddress, getCakeAddress} from 'utils/addressHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport useRefresh from './useRefresh'\r\n\r\n// const useTokenBalance = (tokenAddress: string) => {\r\n//   const [balance, setBalance] = useState(new BigNumber(0))\r\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n//   const { fastRefresh } = useRefresh()\r\n//\r\n//   useEffect(() => {\r\n//     const fetchBalance = async () => {\r\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n//       setBalance(new BigNumber(res))\r\n//     }\r\n//\r\n//     if (account && ethereum) {\r\n//       fetchBalance()\r\n//     }\r\n//   }, [account, ethereum, tokenAddress, fastRefresh])\r\n//\r\n//   return balance\r\n// }\r\n\r\nconst useTokenBalance = (tokenAddress: string, _account?: string, _provider?: any) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account: useAccount, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const account = _account || useAccount;\r\n  const currentProvider = _provider || ethereum;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(currentProvider, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && currentProvider) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, currentProvider, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0xf43261d712cCa4aE55b34B77d9157e773254D1dF').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useLotteryLockedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const burnAddress = getLotteryAddress()\r\n      const [burnedCakeBalance] = await multicall(erc20, [\r\n        {\r\n          address: tokenAddress,\r\n          name: 'balanceOf',\r\n          params: [burnAddress],\r\n        },\r\n      ])\r\n\r\n      if (!burnedCakeBalance) return\r\n\r\n      setBalance(new BigNumber(burnedCakeBalance))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [slowRefresh, tokenAddress])\r\n\r\n  if (!balance) {\r\n    return new BigNumber(0)\r\n  }\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\nbackground-image: url('/images/egg/mod.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n    min-width: 10%;\r\n  min-height: 10%;\r\n  width: 10%;\r\n  height: 100%;\r\n  center: right;\r\n  \r\n \r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\r\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        \r\n        <Block>\r\n          <Label>🚜 to Harvest</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>🚜 in Wallet</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              \r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton  />\r\n          )}\r\n        </Actions>\r\n        <Heading size=\"s\" mb=\"24px\">\r\n          ...\r\n        </Heading>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd, usePriceCakeBnb } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-image: url('/images/egg/stats.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n    min-width: 10%;\r\n  min-height: 10%;\r\n  width: 100%;\r\n  height: auto;\r\n  \r\n  \r\n  \r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n  let honestPerBlock = 0;\r\n  const burnValue = eggPrice.times(burnedBalance);\r\n  const cakePrice = usePriceCakeBusd();\r\n  if(farms && farms[0] && farms[0].honestPerBlock){\r\n    honestPerBlock = new BigNumber(farms[0].honestPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n        🚜 Stats\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">honest Price</Text>\r\n          <CardValue fontSize=\"14px\" value={eggPrice.toNumber()} decimals={2} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Total Supply</Text>\r\n          <Text bold fontSize=\"14px\">{getBalanceNumber(totalSupply)}</Text>\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Circulating Supply</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Tokens to be farmed</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        \r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\"> 🚜/block</Text>\r\n          <Text bold fontSize=\"14px\">{honestPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n\r\n\r\nbackground: linear-gradient(135deg, orange 60%, cyan);\r\nbackground-image: url('/images/egg/tvl.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n    min-width: 10%;\r\n  min-height: 10%;\r\n  width: 10%;\r\n  height: 100%;\r\n  \r\n  align-items: center;\r\n  display: flex;\r\n  flex: 2;\r\n`\r\n\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  const tvl = totalValue.toNumber();\r\n  const realValue = tvl;\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={realValue} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">Across All Barns</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading,LinkExternal,Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\n\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\nbackground-image: url('/images/egg/twitter.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n    min-width: 10%;\r\n  min-height: 10%;\r\n  width: 10%;\r\n  height: 100%;\r\n  center: right;\r\n  \r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Flex flexDirection=\"row\" mb=\"15px\">\r\n        <Heading size=\"l\" mb=\"24px\" color=\"secondary\">\r\n        token go livee : 🚜\r\n        </Heading>\r\n        <LinkExternal mb=\"5px\" small href=\"https://quickswap.exchange/#/swap?outputCurrency=0x4dA646B71014332AE8370017d05205346d3ca50A\">\r\n        BUY \r\n          </LinkExternal>\r\n          </Flex>\r\n          <Heading size=\"l\" mb=\"24px\" color=\"secondary\">\r\n        Farming Starts:\r\n        </Heading>\r\n          <Heading size=\"l\" mb=\"24px\" color=\"secondary\">\r\n        RugDoc Review:\r\n        </Heading>\r\n          <Flex flexDirection=\"row\" mb=\"15px\">\r\n          <LinkExternal mb=\"5px\" small href=\"https://rugdoc.io/project/honest-farms/\">\r\n          RugDoc Review:\r\n          </LinkExternal>\r\n          </Flex>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'Polyhonest'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground-image: url('/images/egg/meta.png');\nbackground-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n \n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst TokenImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 0px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst token = getCakeAddress();\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const FarmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = FarmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  const addWatchJaguarToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'honest',\n              decimals: '18',\n              image: '/logo.png',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Add 🚜\n        </Heading>\n        <Flex flexDirection=\"column\" mb=\"15px\">\n          <LinkExternal mb=\"20px\" small href={`https://polygonscan.com/token/${token}`}>\n            {token}\n          </LinkExternal>\n        </Flex>\n        <TokenImageWrapper>\n          <CardImage src=\"/images/egg/9.png\" alt=\"Farm honest logo\" width={60} height={60} />\n          <hr/>\n          <Button onClick={addWatchJaguarToken} size=\"sm\">\n            + Add 🚜 to <img style={{ marginLeft: 8 }} width={16} src=\"https://jaguarswap.com/images/tokens/metamask.png\" alt=\"metamask logo\" />\n          </Button>\n        </TokenImageWrapper>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Cookies from 'universal-cookie';\r\nimport { Image, Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport rot13 from '../../utils/encode'\r\n// import LotteryCard from './components/LotteryCard'\r\nimport { isAddress } from '../../utils/web3'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport EarnAPRCard from './components/EarnAPRCard'\r\nimport EarnAssetCard from './components/EarnAssetCard'\r\nimport WinCard from './components/WinCard'\r\nimport MetaMask from './components/Metamask'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3a.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 50px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/home.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n    min-width: 10%;\r\n  min-height: 10%;\r\n  width: 100%;\r\n  height: 10%;\r\n  \r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 72px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n    const TranslateString = useI18n()\r\n    const cookies = new Cookies();\r\n    const aint = \"It ain't much but it's Honest Work\"\r\n\r\n    return (\r\n        <Page>\r\n            <Hero>\r\n                <Heading as=\"h1\" size=\"xl\" mb=\"14px\" color=\"secondary\">\r\n                    Honest Farms\r\n                </Heading>\r\n                <Heading as=\"h1\" size=\"m\" mb=\"24px\" color=\"secondary\">\r\n                {aint}\r\n                </Heading>\r\n                <Text>First fixed supply deflationary Farm on polygon</Text>\r\n               \r\n                <Heading as=\"h1\" size=\"xl\" mb=\"14px\" color=\"secondary\">\r\n                    ...\r\n                </Heading>\r\n            </Hero>\r\n             \r\n            \r\n            <div>\r\n                <Cards>\r\n                    <FarmStakingCard />\r\n                    <TwitterCard />\r\n                </Cards>\r\n            \r\n                <Cards>\r\n                    <CakeStats />\r\n                    <TotalValueLockedCard />\r\n                    <MetaMask/>\r\n                </Cards>\r\n            </div>\r\n            \r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}